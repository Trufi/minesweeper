{"version":3,"sources":["components/cell/index.module.css","components/app/index.module.css","components/settings/index.module.css","game/utils.ts","game/actions.ts","game/create.ts","actions.ts","components/cell/index.tsx","components/settings/index.tsx","components/app/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","cell","unknown","marked","mine","number-1","number-2","number-3","number-4","number-5","container","header","fieldWrapper","field","lose","win","center","label","input","random","seed","insideField","size","x","y","openEmptyCell","game","type","opened","number","openMine","checkWin","incrementCellNumber","createGame","minesCount","createEmptyField","_createUniqMines","rnd","busyFields","Set","mines","Math","min","i","_random","_random2","Object","slicedToArray","floor","_random3","_random4","key","concat","has","add","push","createUniqMines","forEach","j","addMineToField","newGameAction","Cell","_ref","onClick","onMarked","onContextMenu","ev","preventDefault","styles","fontSize","round","lineHeight","width","height","classNumber","react_default","a","createElement","className","cn","style","empty","SettingsDialog","onSubmit","_useState","useState","_useState2","state","setState","value","onChange","objectSpread","Number","target","App","dispatch","settings","setSettings","viewField","getViewField","cells","row","window","innerWidth","cellSize","gridTemplateColumns","map","cell_Cell","settings_SettingsDialog","Boolean","location","hostname","match","render","ReactDOM","app_App","document","getElementById","action","openCell","markCell","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.240c0d9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"cell_cell__ctonx\",\"unknown\":\"cell_unknown__2B9QE\",\"marked\":\"cell_marked__3q6vG\",\"mine\":\"cell_mine__MMPmy\",\"number-1\":\"cell_number-1__3avDf\",\"number-2\":\"cell_number-2__V4VtS\",\"number-3\":\"cell_number-3__vepwY\",\"number-4\":\"cell_number-4__2mAgX\",\"number-5\":\"cell_number-5__1ODhQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__1oZPj\",\"header\":\"app_header__2jbYi\",\"fieldWrapper\":\"app_fieldWrapper__w9j7M\",\"field\":\"app_field__1STvU\",\"lose\":\"app_lose__39hej\",\"win\":\"app_win__1wp6G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"settings_container__1gh9N\",\"center\":\"settings_center__3peQ-\",\"label\":\"settings_label__1TvNF\",\"input\":\"settings_input__2UBOs\"};","export const randomSeed = () => Math.round(Math.random() * 2147483647);\r\n\r\nexport const random = (seed: number) => {\r\n    seed = (seed * 16807) % 2147483647;\r\n    return [seed, (seed - 1) / 2147483646];\r\n};\r\n\r\nexport const insideField = (size: number[], x: number, y: number) => {\r\n    return x >= 0 && x < size[0] && y >= 0 && y < size[1];\r\n};\r\n","import { GameState, Mine, ViewField } from './types';\r\nimport { insideField } from './utils';\r\n\r\nexport const openCell = (game: GameState, x: number, y: number) => {\r\n    const { field, size, win, lose } = game;\r\n\r\n    if (win || lose || !insideField(size, x, y)) {\r\n        return;\r\n    }\r\n\r\n    const cell = field[y][x];\r\n\r\n    switch (cell.type) {\r\n        case 'empty':\r\n            openEmptyCell(game, x, y);\r\n            break;\r\n        case 'mine':\r\n            openMine(game, cell);\r\n            break;\r\n    }\r\n\r\n    checkWin(game);\r\n};\r\n\r\nconst openEmptyCell = (game: GameState, x: number, y: number) => {\r\n    const { field, size } = game;\r\n\r\n    if (!insideField(size, x, y)) {\r\n        return;\r\n    }\r\n\r\n    const cell = field[y][x];\r\n    if (cell.type === 'mine' || cell.opened) {\r\n        return;\r\n    }\r\n\r\n    cell.opened = true;\r\n\r\n    if (cell.number === 0) {\r\n        openEmptyCell(game, x + 1, y + 1);\r\n        openEmptyCell(game, x + 1, y - 1);\r\n        openEmptyCell(game, x + 1, y);\r\n        openEmptyCell(game, x - 1, y);\r\n        openEmptyCell(game, x - 1, y + 1);\r\n        openEmptyCell(game, x - 1, y - 1);\r\n        openEmptyCell(game, x, y + 1);\r\n        openEmptyCell(game, x, y - 1);\r\n    }\r\n};\r\n\r\nconst openMine = (game: GameState, mine: Mine) => {\r\n    game.lose = true;\r\n    mine.opened = true;\r\n};\r\n\r\nexport const getViewField = (game: GameState) => {\r\n    const { field, size } = game;\r\n\r\n    const viewField: ViewField = [];\r\n\r\n    for (let y = 0; y < size[1]; y++) {\r\n        viewField[y] = [];\r\n\r\n        for (let x = 0; x < size[0]; x++) {\r\n            const cell = field[y][x];\r\n            if (cell.opened) {\r\n                viewField[y][x] = cell;\r\n            } else {\r\n                viewField[y][x] = {\r\n                    type: 'unknown',\r\n                    x,\r\n                    y,\r\n                    marked: cell.marked,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    return viewField;\r\n};\r\n\r\nconst checkWin = (game: GameState) => {\r\n    const { lose, field, size } = game;\r\n\r\n    if (lose) {\r\n        return;\r\n    }\r\n\r\n    for (let y = 0; y < size[1]; y++) {\r\n        for (let x = 0; x < size[0]; x++) {\r\n            const cell = field[y][x];\r\n\r\n            if (cell.type === 'empty' && !cell.opened) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    game.win = true;\r\n};\r\n\r\nexport const markCell = (game: GameState, x: number, y: number) => {\r\n    const { win, lose, field, size } = game;\r\n\r\n    if (win || lose || !insideField(size, x, y)) {\r\n        return;\r\n    }\r\n\r\n    const cell = field[y][x];\r\n    cell.marked = !cell.marked;\r\n};\r\n","import { GameState, Mine, Cell } from './types';\r\nimport { random, insideField } from './utils';\r\n\r\nconst createUniqMines = (seed: number, size: number[], minesCount: number): [number, Mine[]] => {\r\n    let rnd: number;\r\n\r\n    const busyFields = new Set<string>();\r\n    const mines: Mine[] = [];\r\n\r\n    minesCount = Math.min(minesCount, size[0] * size[1]);\r\n\r\n    let i = 0;\r\n\r\n    while (i < minesCount) {\r\n        [seed, rnd] = random(seed);\r\n        const x = Math.floor(rnd * size[0]);\r\n\r\n        [seed, rnd] = random(seed);\r\n        const y = Math.floor(rnd * size[1]);\r\n\r\n        const key = `${x}_${y}`;\r\n\r\n        if (!busyFields.has(key)) {\r\n            busyFields.add(key);\r\n            mines.push({\r\n                type: 'mine',\r\n                x,\r\n                y,\r\n                opened: false,\r\n                marked: false,\r\n            });\r\n            i++;\r\n        }\r\n    }\r\n\r\n    return [seed, mines];\r\n};\r\n\r\nconst createEmptyField = (size: number[]) => {\r\n    const field: Cell[][] = [];\r\n    for (let y = 0; y < size[1]; y++) {\r\n        field[y] = [];\r\n\r\n        for (let x = 0; x < size[0]; x++) {\r\n            field[y][x] = {\r\n                type: 'empty',\r\n                x,\r\n                y,\r\n                number: 0,\r\n                opened: false,\r\n                marked: false,\r\n            };\r\n        }\r\n    }\r\n    return field;\r\n};\r\n\r\nconst incrementCellNumber = (field: Cell[][], size: number[], x: number, y: number) => {\r\n    if (!insideField(size, x, y)) {\r\n        return;\r\n    }\r\n\r\n    const cell = field[y][x];\r\n    if (cell.type === 'mine') {\r\n        return;\r\n    }\r\n\r\n    cell.number++;\r\n};\r\n\r\nconst addMineToField = (field: Cell[][], size: number[], mine: Mine) => {\r\n    const { x, y } = mine;\r\n\r\n    field[y][x] = mine;\r\n\r\n    for (let i = -1; i <= 1; i++) {\r\n        for (let j = -1; j <= 1; j++) {\r\n            if (i === 0 && j === 0) {\r\n                continue;\r\n            }\r\n\r\n            incrementCellNumber(field, size, x + i, y + j);\r\n        }\r\n    }\r\n};\r\n\r\nexport const createGame = (seed: number, size: number[], minesCount: number): GameState => {\r\n    const field = createEmptyField(size);\r\n\r\n    const [, mines] = createUniqMines(seed, size, minesCount);\r\n\r\n    mines.forEach((mine) => addMineToField(field, size, mine));\r\n\r\n    return {\r\n        field,\r\n        size,\r\n        minesCount,\r\n        lose: false,\r\n        win: false,\r\n    };\r\n};\r\n","export const openCellAction = (x: number, y: number) => ({\r\n    type: 'openCell' as 'openCell',\r\n    x,\r\n    y,\r\n});\r\n\r\nexport type OpenCellAction = ReturnType<typeof openCellAction>;\r\n\r\nexport const markCellAction = (x: number, y: number) => ({\r\n    type: 'markCell' as 'markCell',\r\n    x,\r\n    y,\r\n});\r\n\r\nexport type MarkCellAction = ReturnType<typeof markCellAction>;\r\n\r\nexport const newGameAction = (size: number[], minesCount: number) => ({\r\n    type: 'newGame' as 'newGame',\r\n    size,\r\n    minesCount,\r\n});\r\n\r\nexport type NewGameAction = ReturnType<typeof newGameAction>;\r\n\r\nexport type Action = OpenCellAction | MarkCellAction | NewGameAction;\r\n","import React from 'react';\r\nimport cn from 'classnames';\r\nimport { ViewCell } from '../../game/types';\r\nimport style from './index.module.css';\r\n\r\nexport interface CellProps {\r\n    cell: ViewCell;\r\n    size: number;\r\n    onClick: () => void;\r\n    onMarked: () => void;\r\n}\r\n\r\nexport const Cell = ({ size, cell, onClick, onMarked }: CellProps) => {\r\n    const onContextMenu = (ev: React.MouseEvent) => {\r\n        ev.preventDefault();\r\n        onMarked();\r\n    };\r\n\r\n    const styles = {\r\n        fontSize: Math.round(size * 0.5),\r\n        lineHeight: `${size}px`,\r\n        width: size,\r\n        height: size,\r\n    };\r\n\r\n    if (cell.type === 'empty') {\r\n        const classNumber = Math.min(cell.number, 5);\r\n        return (\r\n            <div\r\n                className={cn(style.cell, style.empty, style[`number-${classNumber}`])}\r\n                style={styles}\r\n                onContextMenu={onContextMenu}\r\n            >\r\n                {cell.number !== 0 ? cell.number : ''}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (cell.type === 'mine') {\r\n        return (\r\n            <div\r\n                className={cn(style.cell, style.mine)}\r\n                style={styles}\r\n                onContextMenu={onContextMenu}\r\n            >\r\n                X\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (cell.marked) {\r\n        return (\r\n            <div\r\n                className={cn(style.cell, style.unknown, style.marked)}\r\n                style={styles}\r\n                onClick={onClick}\r\n                onContextMenu={onContextMenu}\r\n            ></div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={cn(style.cell, style.unknown)}\r\n            style={styles}\r\n            onClick={onClick}\r\n            onContextMenu={onContextMenu}\r\n        ></div>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport style from './index.module.css';\r\n\r\nexport interface SettingsDialogProps {\r\n    size: number[];\r\n    minesCount: number;\r\n    onSubmit: (size: number[], minesCount: number) => void;\r\n}\r\n\r\nexport const SettingsDialog = ({ size, minesCount, onSubmit }: SettingsDialogProps) => {\r\n    const [state, setState] = useState({\r\n        size: size[0],\r\n        minesCount,\r\n    });\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <div className={style.center}>\r\n                <div className={style.label}>\r\n                    Size:{' '}\r\n                    <input\r\n                        className={style.input}\r\n                        type='number'\r\n                        value={state.size}\r\n                        onChange={(ev) =>\r\n                            setState({\r\n                                ...state,\r\n                                size: Math.min(Number(ev.target.value), 50),\r\n                            })\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className={style.label}>\r\n                    Mines:{' '}\r\n                    <input\r\n                        className={style.input}\r\n                        type='number'\r\n                        value={state.minesCount}\r\n                        onChange={(ev) =>\r\n                            setState({\r\n                                ...state,\r\n                                minesCount: Math.min(Number(ev.target.value), 500),\r\n                            })\r\n                        }\r\n                    />\r\n                </div>\r\n                <button onClick={() => onSubmit([state.size, state.size], state.minesCount)}>\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\nimport { GameState, ViewCell } from '../../game/types';\nimport { getViewField } from '../../game';\nimport { Dispatch } from '../../types';\nimport { openCellAction, markCellAction, newGameAction } from '../../actions';\nimport { Cell } from '../cell';\nimport style from './index.module.css';\nimport { SettingsDialog } from '../settings';\n\nexport interface AppProps {\n    game: GameState;\n    dispatch: Dispatch;\n}\n\nexport const App = ({ game, dispatch }: AppProps) => {\n    const [settings, setSettings] = useState(false);\n\n    const field = game.win || game.lose ? game.field : getViewField(game);\n\n    const cells: ViewCell[] = [];\n    field.forEach((row) => row.forEach((cell) => cells.push(cell)));\n\n    const width = Math.min(500, window.innerWidth);\n\n    const cellSize = Math.floor(width / game.size[0]);\n\n    return (\n        <div className={style.container} style={{ width }}>\n            <div className={style.header}>\n                <div>\n                    Size: {game.size[0]}x{game.size[1]}, mines: {game.minesCount}\n                </div>\n                <div>\n                    <button onClick={() => setSettings(!settings)}>Settings</button>\n                </div>\n            </div>\n            <div className={style.fieldWrapper}>\n                <div\n                    className={style.field}\n                    style={{ gridTemplateColumns: `repeat(${game.size[0]}, ${cellSize}px)` }}\n                >\n                    {cells.map((cell) => (\n                        <Cell\n                            key={`${cell.x}_${cell.y}`}\n                            size={cellSize}\n                            cell={cell}\n                            onClick={() => dispatch(openCellAction(cell.x, cell.y))}\n                            onMarked={() => dispatch(markCellAction(cell.x, cell.y))}\n                        />\n                    ))}\n                </div>\n                {settings && (\n                    <SettingsDialog\n                        size={game.size}\n                        minesCount={game.minesCount}\n                        onSubmit={(size, minesCount) => {\n                            dispatch(newGameAction(size, minesCount));\n                            setSettings(false);\n                        }}\n                    />\n                )}\n            </div>\n            {game.lose && (\n                <div\n                    onClick={() => dispatch(newGameAction(game.size, game.minesCount))}\n                    className={style.lose}\n                >\n                    WASTED\n                </div>\n            )}\n            {game.win && (\n                <div\n                    onClick={() => dispatch(newGameAction(game.size, game.minesCount))}\n                    className={style.win}\n                >\n                    WIN!\n                </div>\n            )}\n        </div>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport { App } from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport { createGame, openCell } from './game';\nimport { Action } from './actions';\nimport { Dispatch } from './types';\nimport { markCell } from './game/actions';\nimport { randomSeed } from './game/utils';\n\nlet game = createGame(5, [10, 10], 15);\n\nconst render = () => {\n    ReactDOM.render(<App game={game} dispatch={dispatch} />, document.getElementById('root'));\n};\n\nconst dispatch: Dispatch = (action: Action) => {\n    switch (action.type) {\n        case 'openCell':\n            openCell(game, action.x, action.y);\n            break;\n        case 'markCell':\n            markCell(game, action.x, action.y);\n            break;\n        case 'newGame':\n            game = createGame(randomSeed(), action.size, action.minesCount);\n            break;\n    }\n\n    render();\n};\n\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}