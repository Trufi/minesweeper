{"version":3,"sources":["components/cell/index.module.css","components/app/index.module.css","components/settings/index.module.css","game/utils.ts","game/actions.ts","game/create.ts","actions.ts","components/cell/index.tsx","components/settings/index.tsx","components/app/index.tsx","serviceWorker.ts","components/mlField/index.tsx","components/mlApp/index.tsx","ml/generateData.ts","ml/dataToTensor.ts","ml/index.ts","index.tsx"],"names":["module","exports","cell","predicted","unknown","marked","mine","number-1","number-2","number-3","number-4","number-5","container","header","fieldWrapper","field","lose","win","center","label","input","randomSeed","Math","round","random","seed","insideField","size","x","y","openCell","game","type","openEmptyCell","openMine","checkWin","opened","number","incrementCellNumber","createGame","minesCount","createEmptyField","_createUniqMines","rnd","busyFields","Set","mines","min","i","_random","_random2","Object","slicedToArray","floor","_random3","_random4","key","concat","has","add","push","createUniqMines","forEach","j","addMineToField","newGameAction","Cell","_ref","onClick","onMarked","onContextMenu","ev","preventDefault","styles","fontSize","lineHeight","width","height","classNumber","react_default","a","createElement","className","cn","style","empty","defineProperty","SettingsDialog","onSubmit","_useState","useState","_useState2","state","setState","value","onChange","objectSpread","Number","target","App","dispatch","settings","setSettings","viewField","getViewField","cells","row","window","innerWidth","cellSize","gridTemplateColumns","map","cell_Cell","settings_SettingsDialog","Boolean","location","hostname","match","MlField","_ref$data","data","mineSet","display","margin","MlApp","testData","index","mlField_MlField","createData","_randomCell","_randomCell2","nearestMines","filter","isMineNearWithOpenCell","knownField","isOpen","dataToTensor","buf","tf","length","test","set","toTensor","as2D","dataToMinesTensor","model","dense","units","activation","inputShape","summary","compile","optimizer","loss","metrics","getHtml","array","toFixed","join","createTestData","n","console","log","train","asyncToGenerator","regenerator_default","mark","_callee","validationData","_createTestData","_createTestData2","history","wrap","_context","prev","next","fit","epochs","batchSize","yieldEvery","callbacks","onEpochEnd","epoch","logs","acc","val_loss","val_acc","sent","dispose","abrupt","stop","apply","this","arguments","predict","logData","newX","newY","predictOut","Array","from","shape","dataSync","pred","max","t2","param","t4","as4D","t3","slice","as3D","startGame","render","ReactDOM","app_App","document","getElementById","action","markCell","startMl","mlApp_MlApp","_predict","search","setInterval","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2EACAA,EAAAC,QAAA,CAAkBC,KAAA,mBAAAC,UAAA,wBAAAC,QAAA,sBAAAC,OAAA,qBAAAC,KAAA,mBAAAC,WAAA,uBAAAC,WAAA,uBAAAC,WAAA,uBAAAC,WAAA,uBAAAC,WAAA,4CCAlBX,EAAAC,QAAA,CAAkBW,UAAA,uBAAAC,OAAA,oBAAAC,aAAA,0BAAAC,MAAA,mBAAAC,KAAA,kBAAAC,IAAA,mCCAlBjB,EAAAC,QAAA,CAAkBW,UAAA,4BAAAM,OAAA,yBAAAC,MAAA,wBAAAC,MAAA,kTCDLC,EAAa,kBAAMC,KAAKC,MAAsB,WAAhBD,KAAKE,WAEnCA,EAAS,SAACC,GAEnB,MAAO,CADPA,EAAe,MAAPA,EAAgB,YACTA,EAAO,GAAK,aAGlBC,EAAc,SAACC,EAAgBC,EAAWC,GACnD,OAAOD,GAAK,GAAKA,EAAID,EAAK,IAAME,GAAK,GAAKA,EAAIF,EAAK,ICL1CG,EAAW,SAACC,EAAiBH,EAAWC,GAAc,IACvDd,EAA2BgB,EAA3BhB,MAAOY,EAAoBI,EAApBJ,KAAMV,EAAcc,EAAdd,IAAKD,EAASe,EAATf,KAE1B,IAAIC,IAAOD,GAASU,EAAYC,EAAMC,EAAGC,GAAzC,CAIA,IAAM3B,EAAOa,EAAMc,GAAGD,GAEtB,OAAQ1B,EAAK8B,MACT,IAAK,QACDC,EAAcF,EAAMH,EAAGC,GACvB,MACJ,IAAK,OACDK,EAASH,EAAM7B,GAIvBiC,EAASJ,KAGPE,EAAgB,SAAhBA,EAAiBF,EAAiBH,EAAWC,GAAc,IACrDd,EAAgBgB,EAAhBhB,MAAOY,EAASI,EAATJ,KAEf,GAAKD,EAAYC,EAAMC,EAAGC,GAA1B,CAIA,IAAM3B,EAAOa,EAAMc,GAAGD,GACJ,SAAd1B,EAAK8B,MAAmB9B,EAAKkC,SAIjClC,EAAKkC,QAAS,EAGM,IAAhBlC,EAAKmC,SACLJ,EAAcF,EAAMH,EAAI,EAAGC,EAAI,GAC/BI,EAAcF,EAAMH,EAAI,EAAGC,EAAI,GAC/BI,EAAcF,EAAMH,EAAI,EAAGC,GAC3BI,EAAcF,EAAMH,EAAI,EAAGC,GAC3BI,EAAcF,EAAMH,EAAI,EAAGC,EAAI,GAC/BI,EAAcF,EAAMH,EAAI,EAAGC,EAAI,GAC/BI,EAAcF,EAAMH,EAAGC,EAAI,GAC3BI,EAAcF,EAAMH,EAAGC,EAAI,OAI7BK,EAAW,SAACH,EAAiBzB,GAC/ByB,EAAKf,MAAO,EACZV,EAAK8B,QAAS,GA6BZD,EAAW,SAACJ,GAAoB,IAC1Bf,EAAsBe,EAAtBf,KAAMD,EAAgBgB,EAAhBhB,MAAOY,EAASI,EAATJ,KAErB,IAAIX,EAAJ,CAIA,IAAK,IAAIa,EAAI,EAAGA,EAAIF,EAAK,GAAIE,IACzB,IAAK,IAAID,EAAI,EAAGA,EAAID,EAAK,GAAIC,IAAK,CAC9B,IAAM1B,EAAOa,EAAMc,GAAGD,GAEtB,GAAkB,UAAd1B,EAAK8B,OAAqB9B,EAAKkC,OAC/B,OAKZL,EAAKd,KAAM,IC1CTqB,EAAsB,SAACvB,EAAiBY,EAAgBC,EAAWC,GACrE,GAAKH,EAAYC,EAAMC,EAAGC,GAA1B,CAIA,IAAM3B,EAAOa,EAAMc,GAAGD,GACJ,SAAd1B,EAAK8B,MAIT9B,EAAKmC,WAmBIE,EAAa,SAACd,EAAcE,EAAgBa,GACrD,IAAMzB,EAjDe,SAACY,GAEtB,IADA,IAAMZ,EAAkB,GACfc,EAAI,EAAGA,EAAIF,EAAK,GAAIE,IAAK,CAC9Bd,EAAMc,GAAK,GAEX,IAAK,IAAID,EAAI,EAAGA,EAAID,EAAK,GAAIC,IACzBb,EAAMc,GAAGD,GAAK,CACVI,KAAM,QACNJ,IACAC,IACAQ,OAAQ,EACRD,QAAQ,EACR/B,QAAQ,GAIpB,OAAOU,EAiCO0B,CAAiBd,GADwDe,EAnFnE,SAACjB,EAAcE,EAAgBa,GACnD,IAAIG,EAEEC,EAAa,IAAIC,IACjBC,EAAgB,GAEtBN,EAAalB,KAAKyB,IAAIP,EAAYb,EAAK,GAAKA,EAAK,IAIjD,IAFA,IAAIqB,EAAI,EAEDA,EAAIR,GAAY,KAAAS,EACLzB,EAAOC,GADFyB,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAClBxB,EADkByB,EAAA,GACZP,EADYO,EAAA,GAEnB,IAAMtB,EAAIN,KAAK+B,MAAMV,EAAMhB,EAAK,IAFb2B,EAIL9B,EAAOC,GAJF8B,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAIlB7B,EAJkB8B,EAAA,GAIZZ,EAJYY,EAAA,GAKnB,IAAM1B,EAAIP,KAAK+B,MAAMV,EAAMhB,EAAK,IAE1B6B,EAAG,GAAAC,OAAM7B,EAAN,KAAA6B,OAAW5B,GAEfe,EAAWc,IAAIF,KAChBZ,EAAWe,IAAIH,GACfV,EAAMc,KAAK,CACP5B,KAAM,OACNJ,IACAC,IACAO,QAAQ,EACR/B,QAAQ,IAEZ2C,KAIR,MAAO,CAACvB,EAAMqB,GAsDIe,CAAgBpC,EAAME,EAAMa,GAArCM,EAH8EK,OAAAC,EAAA,EAAAD,CAAAT,EAAA,MAOvF,OAFAI,EAAMgB,QAAQ,SAACxD,GAAD,OArBK,SAACS,EAAiBY,EAAgBrB,GAAe,IAC5DsB,EAAStB,EAATsB,EAAGC,EAAMvB,EAANuB,EAEXd,EAAMc,GAAGD,GAAKtB,EAEd,IAAK,IAAI0C,GAAK,EAAGA,GAAK,EAAGA,IACrB,IAAK,IAAIe,GAAK,EAAGA,GAAK,EAAGA,IACX,IAANf,GAAiB,IAANe,GAIfzB,EAAoBvB,EAAOY,EAAMC,EAAIoB,EAAGnB,EAAIkC,GAU5BC,CAAejD,EAAOY,EAAMrB,KAE7C,CACHS,QACAY,OACAa,aACAM,QACA9B,MAAM,EACNC,KAAK,ICnFAgD,EAAgB,SAACtC,EAAgBa,GAAjB,MAAyC,CAClER,KAAM,UACNL,OACAa,uDCPS0B,EAAO,SAAAC,GAAkD,IAA/CxC,EAA+CwC,EAA/CxC,KAAMzB,EAAyCiE,EAAzCjE,KAAMkE,EAAmCD,EAAnCC,QAASC,EAA0BF,EAA1BE,SAClCC,EAAgB,SAACC,GACnBA,EAAGC,iBACCH,GACAA,KAIFI,EAAS,CACXC,SAAUpD,KAAKC,MAAa,GAAPI,GACrBgD,WAAU,GAAAlB,OAAK9B,EAAL,MACViD,MAAOjD,EACPkD,OAAQlD,GAGZ,GAAkB,UAAdzB,EAAK8B,KAAkB,CACvB,IAAM8C,EAAcxD,KAAKyB,IAAI7C,EAAKmC,OAAQ,GAC1C,OACI0C,EAAAC,EAAAC,cAAA,OACIC,UAAWC,IAAGC,IAAMlF,KAAMkF,IAAMC,MAAOD,IAAK,UAAA3B,OAAWqB,IAA1C3B,OAAAmC,EAAA,EAAAnC,CAAA,GACRiC,IAAMjF,UAAYD,EAAKC,YAE5BiF,MAAOX,EACPH,cAAeA,GAEE,IAAhBpE,EAAKmC,OAAenC,EAAKmC,OAAS,IAK/C,MAAkB,SAAdnC,EAAK8B,KAED+C,EAAAC,EAAAC,cAAA,OACIC,UAAWC,IAAGC,IAAMlF,KAAMkF,IAAM9E,KAAnB6C,OAAAmC,EAAA,EAAAnC,CAAA,GAA4BiC,IAAMjF,UAAYD,EAAKC,YAChEiF,MAAOX,EACPH,cAAeA,GAHnB,KAUJpE,EAAKG,OAED0E,EAAAC,EAAAC,cAAA,OACIC,UAAWC,IAAGC,IAAMlF,KAAMkF,IAAMhF,QAASgF,IAAM/E,OAAlC8C,OAAAmC,EAAA,EAAAnC,CAAA,GACRiC,IAAMjF,UAAYD,EAAKC,YAE5BiF,MAAOX,EACPL,QAASA,EACTE,cAAeA,IAMvBS,EAAAC,EAAAC,cAAA,OACIC,UAAWC,IAAGC,IAAMlF,KAAMkF,IAAMhF,QAAnB+C,OAAAmC,EAAA,EAAAnC,CAAA,GAA+BiC,IAAMjF,UAAYD,EAAKC,YACnEiF,MAAOX,EACPL,QAASA,EACTE,cAAeA,6CC/DdiB,EAAiB,SAAApB,GAAyD,IAAtDxC,EAAsDwC,EAAtDxC,KAAMa,EAAgD2B,EAAhD3B,WAAYgD,EAAoCrB,EAApCqB,SAAoCC,EACzDC,mBAAS,CAC/B/D,KAAMA,EAAK,GACXa,eAH+EmD,EAAAxC,OAAAC,EAAA,EAAAD,CAAAsC,EAAA,GAC5EG,EAD4ED,EAAA,GACrEE,EADqEF,EAAA,GAMnF,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAMxE,WAClBmE,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAMlE,QAClB6D,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAMjE,OAAtB,QACU,IACN4D,EAAAC,EAAAC,cAAA,SACIC,UAAWE,IAAMhE,MACjBY,KAAK,SACL8D,MAAOF,EAAMjE,KACboE,SAAU,SAACxB,GAAD,OACNsB,EAAS1C,OAAA6C,EAAA,EAAA7C,CAAA,GACFyC,EADC,CAEJjE,KAAML,KAAKyB,IAAIkD,OAAO1B,EAAG2B,OAAOJ,OAAQ,WAKxDf,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAMjE,OAAtB,SACW,IACP4D,EAAAC,EAAAC,cAAA,SACIC,UAAWE,IAAMhE,MACjBY,KAAK,SACL8D,MAAOF,EAAMpD,WACbuD,SAAU,SAACxB,GAAD,OACNsB,EAAS1C,OAAA6C,EAAA,EAAA7C,CAAA,GACFyC,EADC,CAEJpD,WAAYlB,KAAKyB,IAAIkD,OAAO1B,EAAG2B,OAAOJ,OAAQ,YAK9Df,EAAAC,EAAAC,cAAA,UAAQb,QAAS,kBAAMoB,EAAS,CAACI,EAAMjE,KAAMiE,EAAMjE,MAAOiE,EAAMpD,cAAhE,aChCH2D,EAAM,SAAAhC,GAAkC,IAA/BpC,EAA+BoC,EAA/BpC,KAAMqE,EAAyBjC,EAAzBiC,SAAyBX,EACjBC,oBAAS,GADQC,EAAAxC,OAAAC,EAAA,EAAAD,CAAAsC,EAAA,GAC1CY,EAD0CV,EAAA,GAChCW,EADgCX,EAAA,GAG3C5E,EAAQgB,EAAKd,KAAOc,EAAKf,KAAOe,EAAKhB,MLuCnB,SAACgB,GAKzB,IAL6C,IACrChB,EAAgBgB,EAAhBhB,MAAOY,EAASI,EAATJ,KAET4E,EAAuB,GAEpB1E,EAAI,EAAGA,EAAIF,EAAK,GAAIE,IAAK,CAC9B0E,EAAU1E,GAAK,GAEf,IAAK,IAAID,EAAI,EAAGA,EAAID,EAAK,GAAIC,IAAK,CAC9B,IAAM1B,EAAOa,EAAMc,GAAGD,GAClB1B,EAAKkC,OACLmE,EAAU1E,GAAGD,GAAK1B,EAElBqG,EAAU1E,GAAGD,GAAK,CACdI,KAAM,UACNJ,IACAC,IACAxB,OAAQH,EAAKG,SAM7B,OAAOkG,EK9D4CC,CAAazE,GAE1D0E,EAAoB,GAC1B1F,EAAM+C,QAAQ,SAAC4C,GAAD,OAASA,EAAI5C,QAAQ,SAAC5D,GAAD,OAAUuG,EAAM7C,KAAK1D,OAExD,IAAM0E,EAAQtD,KAAKyB,IAAI,IAAK4D,OAAOC,YAE7BC,EAAWvF,KAAK+B,MAAMuB,EAAQ7C,EAAKJ,KAAK,IAE9C,OACIoD,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAMxE,UAAWwE,MAAO,CAAER,UACtCG,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAMvE,QAClBkE,EAAAC,EAAAC,cAAA,oBACWlD,EAAKJ,KAAK,GADrB,IAC0BI,EAAKJ,KAAK,GADpC,YACiDI,EAAKS,YAEtDuC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQb,QAAS,kBAAMkC,GAAaD,KAApC,cAGRtB,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAMtE,cAClBiE,EAAAC,EAAAC,cAAA,OACIC,UAAWE,IAAMrE,MACjBqE,MAAO,CAAE0B,oBAAmB,UAAArD,OAAY1B,EAAKJ,KAAK,GAAtB,MAAA8B,OAA6BoD,EAA7B,SAE3BJ,EAAMM,IAAI,SAAC7G,GAAD,OACP6E,EAAAC,EAAAC,cAAC+B,EAAD,CACIxD,IAAG,GAAAC,OAAKvD,EAAK0B,EAAV,KAAA6B,OAAevD,EAAK2B,GACvBF,KAAMkF,EACN3G,KAAMA,EACNkE,QAAS,kBAAMgC,GH9CZxE,EG8CoC1B,EAAK0B,EH9C9BC,EG8CiC3B,EAAK2B,EH9CvB,CACrDG,KAAM,WACNJ,IACAC,OAH0B,IAACD,EAAWC,GG+CdwC,SAAU,kBAAM+B,GHvCbxE,EGuCqC1B,EAAK0B,EHvC/BC,EGuCkC3B,EAAK2B,EHvCxB,CACrDG,KAAM,WACNJ,IACAC,OAH0B,IAACD,EAAWC,QG2CzBwE,GACGtB,EAAAC,EAAAC,cAACgC,EAAD,CACItF,KAAMI,EAAKJ,KACXa,WAAYT,EAAKS,WACjBgD,SAAU,SAAC7D,EAAMa,GACb4D,EAASnC,EAActC,EAAMa,IAC7B8D,GAAY,OAK3BvE,EAAKf,MACF+D,EAAAC,EAAAC,cAAA,OACIb,QAAS,kBAAMgC,EAASnC,EAAclC,EAAKJ,KAAMI,EAAKS,cACtD0C,UAAWE,IAAMpE,MAFrB,UAOHe,EAAKd,KACF8D,EAAAC,EAAAC,cAAA,OACIb,QAAS,kBAAMgC,EAASnC,EAAclC,EAAKJ,KAAMI,EAAKS,cACtD0C,UAAWE,IAAMnE,KAFrB,UC3DIiG,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCTN,IAAM7D,EAAM,SAACtD,GAAD,SAAAuD,OAAuBvD,EAAK0B,EAA5B,KAAA6B,OAAiCvD,EAAK2B,IAErCyF,EAAU,SAAAnD,GAAoD,IAAAoD,EAAApD,EAAjDqD,KAAQ7F,EAAyC4F,EAAzC5F,KAAMZ,EAAmCwG,EAAnCxG,MAAO+B,EAA4ByE,EAA5BzE,MACrC2E,EAAU,IAAI5E,IACpBC,EAAMgB,QAAQ,SAACxD,GAAD,OAAUmH,EAAQ9D,IAAIH,EAAIlD,MAExC,IAAMmG,EAAoB,GAC1B1F,EAAM+C,QAAQ,SAAC4C,GAAD,OACVA,EAAI5C,QAAQ,SAAC5D,GACTA,EAAKG,OAASoH,EAAQ/D,IAAIF,EAAItD,IAC9BuG,EAAM7C,KAAK1D,OAInB,IACM2G,EAAWvF,KAAK+B,MADR,IACsB1B,EAAK,IAEzC,OACIoD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OACIG,MAAO,CACHsC,QAAS,OACTZ,oBAAmB,UAAArD,OAAY9B,EAAK,GAAjB,MAAA8B,OAAwBoD,EAAxB,OACnBc,OAAQ,QAGXlB,EAAMM,IAAI,SAAC7G,GAAD,OACP6E,EAAAC,EAAAC,cAAC+B,EAAD,CAAMxD,IAAG,GAAAC,OAAKvD,EAAK0B,EAAV,KAAA6B,OAAevD,EAAK2B,GAAKF,KAAMkF,EAAU3G,KAAMA,SC5B/D0H,EAAQ,SAAAzD,GAA0B,IAAvBqD,EAAuBrD,EAAvBqD,KACpB,OACIzC,EAAAC,EAAAC,cAAA,OACIG,MAAO,CACHsC,QAAS,OACTZ,oBAAmB,6BAGtBU,EAAKT,IAAI,SAACc,EAAUC,GAAX,OACN/C,EAAAC,EAAAC,cAAC8C,EAAD,CAASvE,IAAKsE,EAAON,KAAMK,QCP9BG,EAAa,SAACrG,EAAgBa,GACvC,IASItC,EATE6B,EAAOQ,EAAWlB,IAAcM,EAAMa,GAOxCZ,EAAI,EACJC,EAAI,EAGR,EAAG,KAAAoG,EATsB,CACrB3G,KAAK+B,MAAM/B,KAAKE,SAAWG,EAAK,IAChCL,KAAK+B,MAAM/B,KAAKE,SAAWG,EAAK,KAOjCuG,EAAA/E,OAAAC,EAAA,EAAAD,CAAA8E,EAAA,GACErG,EADFsG,EAAA,GACKrG,EADLqG,EAAA,GAEChI,EAAO6B,EAAKhB,MAAMc,GAAGD,SACF,UAAd1B,EAAK8B,MAAoC,IAAhB9B,EAAKmC,QAEvCP,EAASC,EAAMH,EAAGC,GASlB,IANA,IAAMsG,EAAepG,EAAKe,MAAMsF,OAAO,SAAC9H,GAAD,OACnC+H,EAAuB/H,EAAMyB,EAAKhB,MAAOgB,EAAKJ,QAG5C2G,EAA2B,GAExBzG,EAAI,EAAGA,EAAIF,EAAK,GAAIE,IAAK,CAC9ByG,EAAWzG,GAAK,GAEhB,IAAK,IAAID,EAAI,EAAGA,EAAID,EAAK,GAAIC,IAAK,CAC9B,IAAM1B,EAAO6B,EAAKhB,MAAMc,GAAGD,GACvB1B,EAAKkC,OACLkG,EAAWzG,GAAGD,GAAK1B,EAEnBoI,EAAWzG,GAAGD,GAAK,CACfI,KAAM,UACNJ,IACAC,IACAxB,OAAQH,EAAKG,SAM7B,MAAO,CACHU,MAAOuH,EACPxF,MAAOqF,EACPxG,SAIF0G,EAAyB,SAAC/H,EAAYS,EAAiBY,GAAmB,IACpEC,EAAStB,EAATsB,EAAGC,EAAMvB,EAANuB,EAEL0G,EAAS,SAAC3G,EAAWC,GACvB,QAAIH,EAAYC,EAAMC,EAAGC,IACRd,EAAMc,GAAGD,GACVQ,QAMpB,OACImG,EAAO3G,EAAI,EAAGC,EAAI,IAClB0G,EAAO3G,EAAI,EAAGC,IACd0G,EAAO3G,EAAI,EAAGC,EAAI,IAClB0G,EAAO3G,EAAGC,EAAI,IACd0G,EAAO3G,EAAGC,EAAI,IACd0G,EAAO3G,EAAI,EAAGC,EAAI,IAClB0G,EAAO3G,EAAI,EAAGC,IACd0G,EAAO3G,EAAI,EAAGC,EAAI,WCvEb2G,EAAe,SAAChB,EAAkB7F,GAC3C,IAAM8G,EAAMC,IAAU,CAAClB,EAAKmB,OAAQhH,EAAK,GAAIA,EAAK,GAHnC,KAmBf,OAdA6F,EAAK1D,QAAQ,SAAC8E,EAAMd,GAChBc,EAAK7H,MAAM+C,QAAQ,SAAC4C,GAAD,OACfA,EAAI5C,QAAQ,SAAC5D,GACS,UAAdA,EAAK8B,KACLyG,EAAII,IAAI,EAAGf,EAAO5H,EAAK2B,EAAG3B,EAAK0B,EAAG1B,EAAKmC,QAClB,YAAdnC,EAAK8B,MACZyG,EAAII,IAAI,EAAGf,EAAO5H,EAAK2B,EAAG3B,EAAK0B,EAAG,SAQ3C6G,EAAIK,WAAWC,KAAKvB,EAAKmB,OAAQhH,EAAK,GAAKA,EAAK,GAnBxC,KAsBNqH,EAAoB,SAACxB,EAAkB7F,GAChD,IAAM8G,EAAMC,IAAU,CAAClB,EAAKmB,OAAQhH,EAAK,GAAIA,EAAK,GAvBnC,KA+Bf,OANA6F,EAAK1D,QAAQ,SAAC8E,EAAMd,GAChBc,EAAK9F,MAAMgB,QAAQ,SAACxD,GAChBmI,EAAII,IAAI,EAAGf,EAAOxH,EAAKuB,EAAGvB,EAAKsB,EAAG,QAInC6G,EAAIK,WAAWC,KAAKvB,EAAKmB,OAAQhH,EAAK,GAAKA,EAAK,GA/BxC,KCJbA,EAAO,CAAC,GAAI,IAGZsH,EAAQP,MAEdO,EAAMtF,IACF+E,IAAUQ,MAAM,CACZC,MAAO,KACPC,WAAY,OACZC,WAAY,CAAC1H,EAAK,GAAKA,EAAK,GAAK,OAIzCsH,EAAMtF,IAAI+E,IAAUQ,MAAM,CAAEC,MAAO,IAAMC,WAAY,UACrDH,EAAMtF,IAAI+E,IAAUQ,MAAM,CAAEC,MAAO,KAAMC,WAAY,UAGrDH,EAAMtF,IAAI+E,IAAUQ,MAAM,CAAEC,MAAOxH,EAAK,GAAKA,EAAK,GAAK,GAAIyH,WAAY,aAEvEH,EAAMK,UAENL,EAAMM,QAAQ,CACVC,UAAW,UAEXC,KAAM,0BAENC,QAAS,CAAC,cAMd,IAAMC,EAAU,SAACC,GACb,OAAOA,EACF7C,IAAI,SAACnF,EAAGoB,GACL,OAAIA,EAAI,KAAO,EACX,KAAAS,OAAY7B,EAAEiI,QAAQ,IAEtB,GAAApG,OAAU7B,EAAEiI,QAAQ,MAG3BC,KAAK,MAGRC,EAAiB,SAACC,GAEpB,IADA,IAAMxC,EAAmB,GAChBxE,EAAI,EAAGA,EAAIgH,EAAGhH,IACnBwE,EAAK5D,KAAKoE,EAAWrG,EA9CV,KAiDfsI,QAAQC,IAAR,WAAAzG,OAAuBuG,EAAvB,UAEA,IAAMpI,EAAI4G,EAAahB,EAAM7F,GACvBE,EAAImH,EAAkBxB,EAAM7F,GAIlC,OAFAsI,QAAQC,IAAR,aAAAzG,OAAyBuG,EAAzB,UAEO,CAACpI,EAAGC,IAGFsI,EAAK,eAAAhG,EAAAhB,OAAAiH,EAAA,EAAAjH,CAAAkH,EAAArF,EAAAsF,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA9I,EAAAC,EAAA8I,EAAA,OAAAN,EAAArF,EAAA4F,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXP,EAAiBT,EAAe,MADrBU,EAEFV,EAAe,MAFbW,EAAAvH,OAAAC,EAAA,EAAAD,CAAAsH,EAAA,GAEV7I,EAFU8I,EAAA,GAEP7I,EAFO6I,EAAA,GAAAG,EAAAE,KAAA,EAIK9B,EAAM+B,IAAIpJ,EAAGC,EAAG,CAClCoJ,OAAQ,EACRC,UAAW,GACXV,iBACAW,WAAY,QACZC,UAAW,CACPC,WAAY,SAACC,EAAOC,GACZA,GACAtB,QAAQC,IAAR,UAAAzG,OACc6H,EADd,YAAA7H,OAC8B8H,EAAK9B,KAAKI,QAAQ,GADhD,WAAApG,OAC4D8H,EAAKC,IAAI3B,QAC7D,GAFR,gBAAApG,OAGoB8H,EAAKE,SAAS5B,QAAQ,GAH1C,gBAAApG,OAG2D8H,EAAKG,QAAQ7B,QAChE,SAhBP,cAIXc,EAJWE,EAAAc,KAwBjBnB,EAAe,GAAGoB,UAClBpB,EAAe,GAAGoB,UAClBhK,EAAEgK,UACF/J,EAAE+J,UA3Bef,EAAAgB,OAAA,SA6BVlB,GA7BU,yBAAAE,EAAAiB,SAAAvB,MAAH,yBAAApG,EAAA4H,MAAAC,KAAAC,YAAA,GAgCLC,EAAU,WACnB,OAAOxD,IAAQ,WACX,IAAMlB,EAAOQ,EAAWrG,EA7Fb,IA8FLwK,EAAU,CAAC3E,GAEX4E,EAAO5D,EAAa2D,EAASxK,GAE7B0K,EAAOrD,EAAkBmD,EAASxK,GAElC2K,EAAarD,EAAMiD,QAAQE,GAEjCnC,QAAQC,IAAI,QAASP,EAAQ4C,MAAMC,KAAKC,EAAML,EAAM,GAAGM,cACvDzC,QAAQC,IAAI,QAASP,EAAQ4C,MAAMC,KAAKC,EAAMJ,EAAM,IAAIK,cAExD,IAAMC,EAAOJ,MAAMC,KAAKC,EAAMH,EAAY,IAAII,YAC9CzC,QAAQC,IACJ,UACAP,EAAQgD,IAGZ,IAAIC,EAAM,EACN9E,EAAQ,EACZ6E,EAAK7I,QAAQ,SAAClC,EAAGoB,GACTpB,EAAIgL,IACJA,EAAMhL,EACNkG,EAAQ9E,KAIhB,IAAMnB,EAAIP,KAAK+B,MAAMyE,EAAQnG,EAAK,IAC5BC,EAAIkG,EAAQjG,EAAIF,EAAK,GAI3B,OAFA6F,EAAKzG,MAAMc,GAAGD,GAAGzB,WAAY,EAEtB,CAAEqH,WAIXiF,EAAQ,SAACI,EAAiBC,GAC5B,IAAMC,EAAKF,EAAGG,KAAKH,EAAGJ,MAAM,GAAI9K,EAAK,GAAIA,EAAK,GAAI,IAE5CsL,EAAKF,EACNG,MAAM,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAGH,EAAGN,MAAM,GAAIM,EAAGN,MAAM,GAAIM,EAAGN,MAAM,KAC3DU,KAAKJ,EAAGN,MAAM,GAAIM,EAAGN,MAAM,GAAIM,EAAGN,MAAM,IAE7C,OAAOQ,EAAGC,MAAM,CAAC,EAAG,EAAGJ,GAAQ,CAACG,EAAGR,MAAM,GAAIQ,EAAGR,MAAM,GAAI,IAAI1D,KAAKkE,EAAGR,MAAM,GAAIQ,EAAGR,MAAM,KC7HvFW,EAAY,WACd,IAAIrL,EAAOQ,EAAW,EAAG,CAAC,GAAI,IAAK,IAE7B8K,EAAS,WACXC,IAASD,OAAOtI,EAAAC,EAAAC,cAACsI,EAAD,CAAKxL,KAAMA,EAAMqE,SAAUA,IAAcoH,SAASC,eAAe,UAG/ErH,EAAqB,SAACsH,GACxB,OAAQA,EAAO1L,MACX,IAAK,WACDF,EAASC,EAAM2L,EAAO9L,EAAG8L,EAAO7L,GAChC,MACJ,IAAK,YZ0EO,SAACE,EAAiBH,EAAWC,GAAc,IACvDZ,EAA2Bc,EAA3Bd,IAAKD,EAAsBe,EAAtBf,KAAMD,EAAgBgB,EAAhBhB,MAAOY,EAASI,EAATJ,KAE1B,IAAIV,IAAOD,GAASU,EAAYC,EAAMC,EAAGC,GAAzC,CAIA,IAAM3B,EAAOa,EAAMc,GAAGD,GACtB1B,EAAKG,QAAUH,EAAKG,QYjFRsN,CAAS5L,EAAM2L,EAAO9L,EAAG8L,EAAO7L,GAChC,MACJ,IAAK,UACDE,EAAOQ,EAAWlB,IAAcqM,EAAO/L,KAAM+L,EAAOlL,YAI5D6K,KAGJA,KAGEO,EAAU,WAGZ,IAFA,IAAMpG,EAAmB,GAEhBxE,EAAI,EAAGA,EAAI,GAAIA,IACpBwE,EAAK5D,KAAKoE,EAAW,CAAC,GAAI,IAAK,KAGnCsF,IAASD,OAAOtI,EAAAC,EAAAC,cAAC4I,EAAD,CAAOrG,KAAMA,IAAUgG,SAASC,eAAe,UAEnEtK,OAAAiH,EAAA,EAAAjH,CAAAkH,EAAArF,EAAAsF,KAAC,SAAAC,IAAA,IAAA1C,EAAA7E,EAAAe,EAAA+J,EAAAtG,EAAA,OAAA6C,EAAArF,EAAA4F,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAC2C,SAApCpE,OAAOQ,SAAS4G,OAAOb,MAAM,GADpC,CAAArC,EAAAE,KAAA,QAEO6C,IAFP/C,EAAAE,KAAA,mBAGkD,OAApCpE,OAAOQ,SAAS4G,OAAOb,MAAM,GAH3C,CAAArC,EAAAE,KAAA,SAIalD,EAAyB,GAE3B7E,EAAI,EACHA,EAAI,EAPhB,YAOmBA,EAAI,IAPvB,CAAA6H,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GAQiBZ,IARjB,QAWW,IADAtC,EAAS7E,GAAK,GACLe,EAAI,EAAGA,EAAI,EAAGA,IAAK+J,EACP5B,IAAT1E,EADgBsG,EAChBtG,KACRK,EAAS7E,GAAGY,KAAK4D,GAErB8F,IAASD,OACLtI,EAAAC,EAAAC,cAAA,WACK4C,EAASd,IAAI,SAACS,EAAMM,GAAP,OACV/C,EAAAC,EAAAC,cAAA,OAAKzB,IAAKsE,GACN/C,EAAAC,EAAAC,cAAA,qBAAa6C,GACb/C,EAAAC,EAAAC,cAAC4I,EAAD,CAAOrG,KAAMA,QAIzBgG,SAASC,eAAe,SAxBvC,QAO2BzK,IAP3B6H,EAAAE,KAAA,gBA4BOiD,YAAY,WAAM,IACNxG,EAAS0E,IAAT1E,KACRK,EAAS7E,GAAGY,KAAK4D,GAEjB8F,IAASD,OACLtI,EAAAC,EAAAC,cAAA,WACK4C,EAASd,IAAI,SAACS,EAAMM,GAAP,OACV/C,EAAAC,EAAAC,cAAA,OAAKzB,IAAKsE,GACN/C,EAAAC,EAAAC,cAAA,qBAAa6C,GACb/C,EAAAC,EAAAC,cAAC4I,EAAD,CAAOrG,KAAMA,QAIzBgG,SAASC,eAAe,UAE7B,KA3CV5C,EAAAE,KAAA,iBA6COqC,IA7CP,yBAAAvC,EAAAiB,SAAAvB,KAADpH,GNsFM,kBAAmB8K,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4e29d72a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"cell_cell__ctonx\",\"predicted\":\"cell_predicted__3Rw06\",\"unknown\":\"cell_unknown__2B9QE\",\"marked\":\"cell_marked__3q6vG\",\"mine\":\"cell_mine__MMPmy\",\"number-1\":\"cell_number-1__3avDf\",\"number-2\":\"cell_number-2__V4VtS\",\"number-3\":\"cell_number-3__vepwY\",\"number-4\":\"cell_number-4__2mAgX\",\"number-5\":\"cell_number-5__1ODhQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__1oZPj\",\"header\":\"app_header__2jbYi\",\"fieldWrapper\":\"app_fieldWrapper__w9j7M\",\"field\":\"app_field__1STvU\",\"lose\":\"app_lose__39hej\",\"win\":\"app_win__1wp6G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"settings_container__1gh9N\",\"center\":\"settings_center__3peQ-\",\"label\":\"settings_label__1TvNF\",\"input\":\"settings_input__2UBOs\"};","export const randomSeed = () => Math.round(Math.random() * 2147483647);\r\n\r\nexport const random = (seed: number) => {\r\n    seed = (seed * 16807) % 2147483647;\r\n    return [seed, (seed - 1) / 2147483646];\r\n};\r\n\r\nexport const insideField = (size: number[], x: number, y: number) => {\r\n    return x >= 0 && x < size[0] && y >= 0 && y < size[1];\r\n};\r\n","import { GameState, Mine, ViewField } from './types';\nimport { insideField } from './utils';\n\nexport const openCell = (game: GameState, x: number, y: number) => {\n    const { field, size, win, lose } = game;\n\n    if (win || lose || !insideField(size, x, y)) {\n        return;\n    }\n\n    const cell = field[y][x];\n\n    switch (cell.type) {\n        case 'empty':\n            openEmptyCell(game, x, y);\n            break;\n        case 'mine':\n            openMine(game, cell);\n            break;\n    }\n\n    checkWin(game);\n};\n\nconst openEmptyCell = (game: GameState, x: number, y: number) => {\n    const { field, size } = game;\n\n    if (!insideField(size, x, y)) {\n        return;\n    }\n\n    const cell = field[y][x];\n    if (cell.type === 'mine' || cell.opened) {\n        return;\n    }\n\n    cell.opened = true;\n\n    // TODO: раскоментить, чтобы игра работала\n    if (cell.number === 0) {\n        openEmptyCell(game, x + 1, y + 1);\n        openEmptyCell(game, x + 1, y - 1);\n        openEmptyCell(game, x + 1, y);\n        openEmptyCell(game, x - 1, y);\n        openEmptyCell(game, x - 1, y + 1);\n        openEmptyCell(game, x - 1, y - 1);\n        openEmptyCell(game, x, y + 1);\n        openEmptyCell(game, x, y - 1);\n    }\n};\n\nconst openMine = (game: GameState, mine: Mine) => {\n    game.lose = true;\n    mine.opened = true;\n};\n\nexport const getViewField = (game: GameState) => {\n    const { field, size } = game;\n\n    const viewField: ViewField = [];\n\n    for (let y = 0; y < size[1]; y++) {\n        viewField[y] = [];\n\n        for (let x = 0; x < size[0]; x++) {\n            const cell = field[y][x];\n            if (cell.opened) {\n                viewField[y][x] = cell;\n            } else {\n                viewField[y][x] = {\n                    type: 'unknown',\n                    x,\n                    y,\n                    marked: cell.marked,\n                };\n            }\n        }\n    }\n\n    return viewField;\n};\n\nconst checkWin = (game: GameState) => {\n    const { lose, field, size } = game;\n\n    if (lose) {\n        return;\n    }\n\n    for (let y = 0; y < size[1]; y++) {\n        for (let x = 0; x < size[0]; x++) {\n            const cell = field[y][x];\n\n            if (cell.type === 'empty' && !cell.opened) {\n                return;\n            }\n        }\n    }\n\n    game.win = true;\n};\n\nexport const markCell = (game: GameState, x: number, y: number) => {\n    const { win, lose, field, size } = game;\n\n    if (win || lose || !insideField(size, x, y)) {\n        return;\n    }\n\n    const cell = field[y][x];\n    cell.marked = !cell.marked;\n};\n","import { GameState, Mine, Cell } from './types';\r\nimport { random, insideField } from './utils';\r\n\r\nconst createUniqMines = (seed: number, size: number[], minesCount: number): [number, Mine[]] => {\r\n    let rnd: number;\r\n\r\n    const busyFields = new Set<string>();\r\n    const mines: Mine[] = [];\r\n\r\n    minesCount = Math.min(minesCount, size[0] * size[1]);\r\n\r\n    let i = 0;\r\n\r\n    while (i < minesCount) {\r\n        [seed, rnd] = random(seed);\r\n        const x = Math.floor(rnd * size[0]);\r\n\r\n        [seed, rnd] = random(seed);\r\n        const y = Math.floor(rnd * size[1]);\r\n\r\n        const key = `${x}_${y}`;\r\n\r\n        if (!busyFields.has(key)) {\r\n            busyFields.add(key);\r\n            mines.push({\r\n                type: 'mine',\r\n                x,\r\n                y,\r\n                opened: false,\r\n                marked: false,\r\n            });\r\n            i++;\r\n        }\r\n    }\r\n\r\n    return [seed, mines];\r\n};\r\n\r\nconst createEmptyField = (size: number[]) => {\r\n    const field: Cell[][] = [];\r\n    for (let y = 0; y < size[1]; y++) {\r\n        field[y] = [];\r\n\r\n        for (let x = 0; x < size[0]; x++) {\r\n            field[y][x] = {\r\n                type: 'empty',\r\n                x,\r\n                y,\r\n                number: 0,\r\n                opened: false,\r\n                marked: false,\r\n            };\r\n        }\r\n    }\r\n    return field;\r\n};\r\n\r\nconst incrementCellNumber = (field: Cell[][], size: number[], x: number, y: number) => {\r\n    if (!insideField(size, x, y)) {\r\n        return;\r\n    }\r\n\r\n    const cell = field[y][x];\r\n    if (cell.type === 'mine') {\r\n        return;\r\n    }\r\n\r\n    cell.number++;\r\n};\r\n\r\nconst addMineToField = (field: Cell[][], size: number[], mine: Mine) => {\r\n    const { x, y } = mine;\r\n\r\n    field[y][x] = mine;\r\n\r\n    for (let i = -1; i <= 1; i++) {\r\n        for (let j = -1; j <= 1; j++) {\r\n            if (i === 0 && j === 0) {\r\n                continue;\r\n            }\r\n\r\n            incrementCellNumber(field, size, x + i, y + j);\r\n        }\r\n    }\r\n};\r\n\r\nexport const createGame = (seed: number, size: number[], minesCount: number): GameState => {\r\n    const field = createEmptyField(size);\r\n\r\n    const [, mines] = createUniqMines(seed, size, minesCount);\r\n\r\n    mines.forEach((mine) => addMineToField(field, size, mine));\r\n\r\n    return {\r\n        field,\r\n        size,\r\n        minesCount,\r\n        mines,\r\n        lose: false,\r\n        win: false,\r\n    };\r\n};\r\n","export const openCellAction = (x: number, y: number) => ({\r\n    type: 'openCell' as 'openCell',\r\n    x,\r\n    y,\r\n});\r\n\r\nexport type OpenCellAction = ReturnType<typeof openCellAction>;\r\n\r\nexport const markCellAction = (x: number, y: number) => ({\r\n    type: 'markCell' as 'markCell',\r\n    x,\r\n    y,\r\n});\r\n\r\nexport type MarkCellAction = ReturnType<typeof markCellAction>;\r\n\r\nexport const newGameAction = (size: number[], minesCount: number) => ({\r\n    type: 'newGame' as 'newGame',\r\n    size,\r\n    minesCount,\r\n});\r\n\r\nexport type NewGameAction = ReturnType<typeof newGameAction>;\r\n\r\nexport type Action = OpenCellAction | MarkCellAction | NewGameAction;\r\n","import React from 'react';\r\nimport cn from 'classnames';\r\nimport { ViewCell } from '../../game/types';\r\nimport style from './index.module.css';\r\n\r\nexport interface CellProps {\r\n    cell: ViewCell;\r\n    size: number;\r\n    onClick?: () => void;\r\n    onMarked?: () => void;\r\n}\r\n\r\nexport const Cell = ({ size, cell, onClick, onMarked }: CellProps) => {\r\n    const onContextMenu = (ev: React.MouseEvent) => {\r\n        ev.preventDefault();\r\n        if (onMarked) {\r\n            onMarked();\r\n        }\r\n    };\r\n\r\n    const styles = {\r\n        fontSize: Math.round(size * 0.5),\r\n        lineHeight: `${size}px`,\r\n        width: size,\r\n        height: size,\r\n    };\r\n\r\n    if (cell.type === 'empty') {\r\n        const classNumber = Math.min(cell.number, 5);\r\n        return (\r\n            <div\r\n                className={cn(style.cell, style.empty, style[`number-${classNumber}`], {\r\n                    [style.predicted]: cell.predicted,\r\n                })}\r\n                style={styles}\r\n                onContextMenu={onContextMenu}\r\n            >\r\n                {cell.number !== 0 ? cell.number : ''}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (cell.type === 'mine') {\r\n        return (\r\n            <div\r\n                className={cn(style.cell, style.mine, { [style.predicted]: cell.predicted })}\r\n                style={styles}\r\n                onContextMenu={onContextMenu}\r\n            >\r\n                X\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (cell.marked) {\r\n        return (\r\n            <div\r\n                className={cn(style.cell, style.unknown, style.marked, {\r\n                    [style.predicted]: cell.predicted,\r\n                })}\r\n                style={styles}\r\n                onClick={onClick}\r\n                onContextMenu={onContextMenu}\r\n            ></div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={cn(style.cell, style.unknown, { [style.predicted]: cell.predicted })}\r\n            style={styles}\r\n            onClick={onClick}\r\n            onContextMenu={onContextMenu}\r\n        ></div>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport style from './index.module.css';\r\n\r\nexport interface SettingsDialogProps {\r\n    size: number[];\r\n    minesCount: number;\r\n    onSubmit: (size: number[], minesCount: number) => void;\r\n}\r\n\r\nexport const SettingsDialog = ({ size, minesCount, onSubmit }: SettingsDialogProps) => {\r\n    const [state, setState] = useState({\r\n        size: size[0],\r\n        minesCount,\r\n    });\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <div className={style.center}>\r\n                <div className={style.label}>\r\n                    Size:{' '}\r\n                    <input\r\n                        className={style.input}\r\n                        type='number'\r\n                        value={state.size}\r\n                        onChange={(ev) =>\r\n                            setState({\r\n                                ...state,\r\n                                size: Math.min(Number(ev.target.value), 50),\r\n                            })\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className={style.label}>\r\n                    Mines:{' '}\r\n                    <input\r\n                        className={style.input}\r\n                        type='number'\r\n                        value={state.minesCount}\r\n                        onChange={(ev) =>\r\n                            setState({\r\n                                ...state,\r\n                                minesCount: Math.min(Number(ev.target.value), 500),\r\n                            })\r\n                        }\r\n                    />\r\n                </div>\r\n                <button onClick={() => onSubmit([state.size, state.size], state.minesCount)}>\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\nimport { GameState, ViewCell } from '../../game/types';\nimport { getViewField } from '../../game';\nimport { Dispatch } from '../../types';\nimport { openCellAction, markCellAction, newGameAction } from '../../actions';\nimport { Cell } from '../cell';\nimport style from './index.module.css';\nimport { SettingsDialog } from '../settings';\n\nexport interface AppProps {\n    game: GameState;\n    dispatch: Dispatch;\n}\n\nexport const App = ({ game, dispatch }: AppProps) => {\n    const [settings, setSettings] = useState(false);\n\n    const field = game.win || game.lose ? game.field : getViewField(game);\n\n    const cells: ViewCell[] = [];\n    field.forEach((row) => row.forEach((cell) => cells.push(cell)));\n\n    const width = Math.min(500, window.innerWidth);\n\n    const cellSize = Math.floor(width / game.size[0]);\n\n    return (\n        <div className={style.container} style={{ width }}>\n            <div className={style.header}>\n                <div>\n                    Size: {game.size[0]}x{game.size[1]}, mines: {game.minesCount}\n                </div>\n                <div>\n                    <button onClick={() => setSettings(!settings)}>Settings</button>\n                </div>\n            </div>\n            <div className={style.fieldWrapper}>\n                <div\n                    className={style.field}\n                    style={{ gridTemplateColumns: `repeat(${game.size[0]}, ${cellSize}px)` }}\n                >\n                    {cells.map((cell) => (\n                        <Cell\n                            key={`${cell.x}_${cell.y}`}\n                            size={cellSize}\n                            cell={cell}\n                            onClick={() => dispatch(openCellAction(cell.x, cell.y))}\n                            onMarked={() => dispatch(markCellAction(cell.x, cell.y))}\n                        />\n                    ))}\n                </div>\n                {settings && (\n                    <SettingsDialog\n                        size={game.size}\n                        minesCount={game.minesCount}\n                        onSubmit={(size, minesCount) => {\n                            dispatch(newGameAction(size, minesCount));\n                            setSettings(false);\n                        }}\n                    />\n                )}\n            </div>\n            {game.lose && (\n                <div\n                    onClick={() => dispatch(newGameAction(game.size, game.minesCount))}\n                    className={style.lose}\n                >\n                    WASTED\n                </div>\n            )}\n            {game.win && (\n                <div\n                    onClick={() => dispatch(newGameAction(game.size, game.minesCount))}\n                    className={style.win}\n                >\n                    WIN!\n                </div>\n            )}\n        </div>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { TestData } from '../../ml/generateData';\r\nimport { ViewCell } from '../../game/types';\r\nimport { Cell } from '../cell';\r\n\r\nexport interface MlFieldProps {\r\n    data: TestData;\r\n}\r\n\r\nconst key = (cell: ViewCell) => `${cell.x}_${cell.y}`;\r\n\r\nexport const MlField = ({ data: { size, field, mines } }: MlFieldProps) => {\r\n    const mineSet = new Set<string>();\r\n    mines.forEach((mine) => mineSet.add(key(mine)));\r\n\r\n    const cells: ViewCell[] = [];\r\n    field.forEach((row) =>\r\n        row.forEach((cell) => {\r\n            cell.marked = mineSet.has(key(cell));\r\n            cells.push(cell);\r\n        }),\r\n    );\r\n\r\n    const width = 200;\r\n    const cellSize = Math.floor(width / size[0]);\r\n\r\n    return (\r\n        <div>\r\n            <div\r\n                style={{\r\n                    display: 'grid',\r\n                    gridTemplateColumns: `repeat(${size[0]}, ${cellSize}px)`,\r\n                    margin: '5px',\r\n                }}\r\n            >\r\n                {cells.map((cell) => (\r\n                    <Cell key={`${cell.x}_${cell.y}`} size={cellSize} cell={cell} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { TestData } from '../../ml/generateData';\r\nimport { MlField } from '../mlField';\r\n\r\nexport interface MlAppProps {\r\n    data: TestData[];\r\n}\r\n\r\nexport const MlApp = ({ data }: MlAppProps) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'grid',\r\n                gridTemplateColumns: `repeat(auto-fill, 205px)`,\r\n            }}\r\n        >\r\n            {data.map((testData, index) => (\r\n                <MlField key={index} data={testData} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n","import { createGame, openCell } from '../game';\nimport { randomSeed, insideField } from '../game/utils';\nimport { Mine, Cell, ViewCell } from '../game/types';\n\nexport interface TestData {\n    size: number[];\n    field: ViewCell[][];\n    mines: Mine[];\n}\n\nexport const createData = (size: number[], minesCount: number): TestData => {\n    const game = createGame(randomSeed(), size, minesCount);\n\n    const randomCell = () => [\n        Math.floor(Math.random() * size[0]),\n        Math.floor(Math.random() * size[1]),\n    ];\n\n    let x = 0;\n    let y = 0;\n    let cell: Cell;\n\n    do {\n        [x, y] = randomCell();\n        cell = game.field[y][x];\n    } while (cell.type !== 'empty' || cell.number !== 0);\n\n    openCell(game, x, y);\n\n    // Ищем мины рядом с открытыми\n    const nearestMines = game.mines.filter((mine) =>\n        isMineNearWithOpenCell(mine, game.field, game.size),\n    );\n\n    const knownField: ViewCell[][] = [];\n\n    for (let y = 0; y < size[1]; y++) {\n        knownField[y] = [];\n\n        for (let x = 0; x < size[0]; x++) {\n            const cell = game.field[y][x];\n            if (cell.opened) {\n                knownField[y][x] = cell;\n            } else {\n                knownField[y][x] = {\n                    type: 'unknown',\n                    x,\n                    y,\n                    marked: cell.marked,\n                };\n            }\n        }\n    }\n\n    return {\n        field: knownField,\n        mines: nearestMines,\n        size,\n    };\n};\n\nconst isMineNearWithOpenCell = (mine: Mine, field: Cell[][], size: number[]) => {\n    const { x, y } = mine;\n\n    const isOpen = (x: number, y: number): boolean => {\n        if (insideField(size, x, y)) {\n            const cell = field[y][x];\n            return cell.opened;\n        }\n\n        return false;\n    };\n\n    return (\n        isOpen(x + 1, y + 1) ||\n        isOpen(x + 1, y) ||\n        isOpen(x + 1, y - 1) ||\n        isOpen(x, y + 1) ||\n        isOpen(x, y - 1) ||\n        isOpen(x - 1, y + 1) ||\n        isOpen(x - 1, y) ||\n        isOpen(x - 1, y - 1)\n    );\n};\n","import * as tf from '@tensorflow/tfjs';\r\nimport { TestData } from './generateData';\r\n\r\n/**\r\n * 0 - 8\r\n * 9 - unknown\r\n * 10 - mine\r\n */\r\nconst typeNumber = 11;\r\n\r\nexport const dataToTensor = (data: TestData[], size: number[]) => {\r\n    const buf = tf.buffer([data.length, size[1], size[0], typeNumber]);\r\n\r\n    data.forEach((test, index) => {\r\n        test.field.forEach((row) =>\r\n            row.forEach((cell) => {\r\n                if (cell.type === 'empty') {\r\n                    buf.set(1, index, cell.y, cell.x, cell.number);\r\n                } else if (cell.type === 'unknown') {\r\n                    buf.set(1, index, cell.y, cell.x, 9);\r\n                }\r\n\r\n                // TODO: add mines\r\n            }),\r\n        );\r\n    });\r\n\r\n    return buf.toTensor().as2D(data.length, size[1] * size[0] * typeNumber);\r\n};\r\n\r\nexport const dataToMinesTensor = (data: TestData[], size: number[]) => {\r\n    const buf = tf.buffer([data.length, size[1], size[0], typeNumber]);\r\n\r\n    data.forEach((test, index) => {\r\n        test.mines.forEach((mine) => {\r\n            buf.set(1, index, mine.y, mine.x, 10);\r\n        });\r\n    });\r\n\r\n    return buf.toTensor().as2D(data.length, size[1] * size[0] * typeNumber);\r\n};\r\n","import * as tf from '@tensorflow/tfjs';\nimport { createData, TestData } from './generateData';\nimport { dataToTensor, dataToMinesTensor } from './dataToTensor';\n\nconst size = [10, 10];\nconst minesCount = 10;\n\nconst model = tf.sequential();\n\nmodel.add(\n    tf.layers.dense({\n        units: 2500,\n        activation: 'relu',\n        inputShape: [size[1] * size[0] * 11],\n    }),\n);\n\nmodel.add(tf.layers.dense({ units: 2000, activation: 'relu' }));\nmodel.add(tf.layers.dense({ units: 1500, activation: 'relu' }));\n// model.add(tf.layers.reshape({ targetShape: [size[1], size[0]] }));\n// model.add(tf.layers.timeDistributed({ layer: tf.layers.dense({ units: 11 }) }));\nmodel.add(tf.layers.dense({ units: size[0] * size[1] * 11, activation: 'softmax' }));\n\nmodel.summary();\n\nmodel.compile({\n    optimizer: 'rmsprop', // tf.train.adam(),\n\n    loss: 'categoricalCrossentropy',\n    // loss: 'sparseCategoricalCrossentropy', // нужно использовать oneHot\n    metrics: ['accuracy'],\n\n    // loss: tf.losses.meanSquaredError,\n    // metrics: ['mse'],\n});\n\nconst getHtml = (array: number[]) => {\n    return array\n        .map((x, i) => {\n            if (i % 10 === 0) {\n                return `\\n${x.toFixed(1)}`;\n            } else {\n                return `${x.toFixed(1)}`;\n            }\n        })\n        .join(' ');\n};\n\nconst createTestData = (n: number) => {\n    const data: TestData[] = [];\n    for (let i = 0; i < n; i++) {\n        data.push(createData(size, minesCount));\n    }\n\n    console.log(`Created ${n} data`);\n\n    const x = dataToTensor(data, size);\n    const y = dataToMinesTensor(data, size);\n\n    console.log(`Converted ${n} data`);\n\n    return [x, y] as [tf.Tensor2D, tf.Tensor2D];\n};\n\nexport const train = async () => {\n    const validationData = createTestData(2048);\n    const [x, y] = createTestData(2048 * 2);\n\n    const history = await model.fit(x, y, {\n        epochs: 1,\n        batchSize: 32,\n        validationData,\n        yieldEvery: 'epoch',\n        callbacks: {\n            onEpochEnd: (epoch, logs) => {\n                if (logs) {\n                    console.log(\n                        `Epoch: ${epoch}\\nloss: ${logs.loss.toFixed(3)}\\nacc: ${logs.acc.toFixed(\n                            3,\n                        )}\\nval_loss: ${logs.val_loss.toFixed(3)}\\nacc_loss: ${logs.val_acc.toFixed(\n                            3,\n                        )}`,\n                    );\n                }\n            },\n        },\n    });\n\n    validationData[0].dispose();\n    validationData[1].dispose();\n    x.dispose();\n    y.dispose();\n\n    return history;\n};\n\nexport const predict = (): { data: TestData } => {\n    return tf.tidy(() => {\n        const data = createData(size, minesCount);\n        const logData = [data];\n\n        const newX = dataToTensor(logData, size);\n\n        const newY = dataToMinesTensor(logData, size);\n\n        const predictOut = model.predict(newX) as tf.Tensor2D;\n\n        console.log('RealX', getHtml(Array.from(shape(newX, 1).dataSync())));\n        console.log('RealY', getHtml(Array.from(shape(newY, 10).dataSync())));\n\n        const pred = Array.from(shape(predictOut, 10).dataSync());\n        console.log(\n            'Predict',\n            getHtml(pred), //.map((x) => Math.round(x))),\n        );\n\n        let max = 0;\n        let index = 0;\n        pred.forEach((x, i) => {\n            if (x > max) {\n                max = x;\n                index = i;\n            }\n        });\n\n        const y = Math.floor(index / size[0]);\n        const x = index - y * size[1];\n\n        data.field[y][x].predicted = true;\n\n        return { data } as any;\n    });\n};\n\nconst shape = (t2: tf.Tensor2D, param: number) => {\n    const t4 = t2.as4D(t2.shape[0], size[1], size[0], 11);\n\n    const t3 = t4\n        .slice([0, 0, 0, 0], [1, t4.shape[1], t4.shape[2], t4.shape[3]])\n        .as3D(t4.shape[1], t4.shape[2], t4.shape[3]);\n\n    return t3.slice([0, 0, param], [t3.shape[0], t3.shape[1], 1]).as2D(t3.shape[0], t3.shape[1]);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport { App } from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport { createGame, openCell } from './game';\nimport { Action } from './actions';\nimport { Dispatch } from './types';\nimport { markCell } from './game/actions';\nimport { randomSeed } from './game/utils';\nimport { MlApp } from './components/mlApp';\nimport { createData, TestData } from './ml/generateData';\nimport { train, predict } from './ml';\n\nconst startGame = () => {\n    let game = createGame(5, [10, 10], 15);\n\n    const render = () => {\n        ReactDOM.render(<App game={game} dispatch={dispatch} />, document.getElementById('root'));\n    };\n\n    const dispatch: Dispatch = (action: Action) => {\n        switch (action.type) {\n            case 'openCell':\n                openCell(game, action.x, action.y);\n                break;\n            case 'markCell':\n                markCell(game, action.x, action.y);\n                break;\n            case 'newGame':\n                game = createGame(randomSeed(), action.size, action.minesCount);\n                break;\n        }\n\n        render();\n    };\n\n    render();\n};\n\nconst startMl = () => {\n    const data: TestData[] = [];\n\n    for (let i = 0; i < 20; i++) {\n        data.push(createData([10, 10], 15));\n    }\n\n    ReactDOM.render(<MlApp data={data} />, document.getElementById('root'));\n};\n(async () => {\n    if (window.location.search.slice(1) === 'test') {\n        startMl();\n    } else if (window.location.search.slice(1) === 'ml') {\n        const testData: TestData[][] = [];\n\n        let i = 0;\n        for (i = 0; i < 50; i++) {\n            await train();\n\n            testData[i] = [];\n            for (let j = 0; j < 3; j++) {\n                const { data } = predict();\n                testData[i].push(data);\n            }\n            ReactDOM.render(\n                <div>\n                    {testData.map((data, index) => (\n                        <div key={index}>\n                            <div>Epoch: {index}</div>\n                            <MlApp data={data} />\n                        </div>\n                    ))}\n                </div>,\n                document.getElementById('root'),\n            );\n        }\n\n        setInterval(() => {\n            const { data } = predict();\n            testData[i].push(data);\n\n            ReactDOM.render(\n                <div>\n                    {testData.map((data, index) => (\n                        <div key={index}>\n                            <div>Epoch: {index}</div>\n                            <MlApp data={data} />\n                        </div>\n                    ))}\n                </div>,\n                document.getElementById('root'),\n            );\n        }, 500);\n    } else {\n        startGame();\n    }\n})();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}