{"version":3,"sources":["components/cell/index.module.css","components/app/index.module.css","components/settings/index.module.css","game/utils.ts","game/actions.ts","game/create.ts","actions.ts","components/cell/index.tsx","components/settings/index.tsx","components/app/index.tsx","serviceWorker.ts","components/mlField/index.tsx","components/mlApp/index.tsx","ml/generateData.ts","ml/dataToTensor.ts","ml/index.ts","index.tsx"],"names":["module","exports","cell","predicted","unknown","marked","mine","number-1","number-2","number-3","number-4","number-5","container","header","fieldWrapper","field","lose","win","center","label","input","randomSeed","Math","round","random","seed","insideField","size","x","y","openCell","game","type","openEmptyCell","openMine","checkWin","opened","number","incrementCellNumber","createGame","minesCount","createEmptyField","_createUniqMines","rnd","busyFields","Set","mines","min","i","_random","_random2","Object","slicedToArray","floor","_random3","_random4","key","concat","has","add","push","createUniqMines","forEach","j","addMineToField","newGameAction","Cell","_ref","onClick","onMarked","onContextMenu","ev","preventDefault","classNumber","react_default","a","createElement","className","cn","style","empty","defineProperty","SettingsDialog","onSubmit","_useState","useState","_useState2","state","setState","value","onChange","objectSpread","Number","target","App","dispatch","settings","setSettings","viewField","getViewField","cells","row","width","window","innerWidth","cellSize","height","gridTemplateColumns","transform","map","cell_Cell","settings_SettingsDialog","Boolean","location","hostname","match","MlField","_ref$data","data","mineSet","display","transformOrigin","margin","MlApp","testData","index","mlField_MlField","createData","_randomCell","_randomCell2","nearestMines","filter","isMineNearWithOpenCell","knownField","isOpen","dataToTensor","buf","tf","length","test","set","toTensor","as2D","dataToMinesTensor","model","dense","units","activation","inputShape","summary","compile","optimizer","loss","metrics","getHtml","array","toFixed","join","createTestData","n","console","log","train","asyncToGenerator","regenerator_default","mark","_callee","validationData","_createTestData","_createTestData2","history","wrap","_context","prev","next","fit","epochs","batchSize","yieldEvery","callbacks","onEpochEnd","epoch","logs","acc","val_loss","val_acc","sent","dispose","abrupt","stop","apply","this","arguments","predict","logData","newX","newY","predictOut","Array","from","shape","dataSync","pred","max","t2","param","t4","as4D","t3","slice","as3D","startGame","render","ReactDOM","app_App","document","getElementById","action","markCell","startMl","mlApp_MlApp","_predict","search","setInterval","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ccf1947.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"cell_cell__1VF6U\",\"predicted\":\"cell_predicted__1xoPs\",\"unknown\":\"cell_unknown__1FzQ7\",\"marked\":\"cell_marked__2JA7p\",\"mine\":\"cell_mine__1EGUU\",\"number-1\":\"cell_number-1__112oq\",\"number-2\":\"cell_number-2__2f9qc\",\"number-3\":\"cell_number-3__2A-96\",\"number-4\":\"cell_number-4__1a4f3\",\"number-5\":\"cell_number-5__2kNM0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__GX8ug\",\"header\":\"app_header__1-qxS\",\"fieldWrapper\":\"app_fieldWrapper__F52kr\",\"field\":\"app_field__l7T4B\",\"lose\":\"app_lose__3bcQe\",\"win\":\"app_win__XkiB6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"settings_container__3wBNz\",\"center\":\"settings_center__1etCf\",\"label\":\"settings_label__25fRd\",\"input\":\"settings_input__26gbE\"};","export const randomSeed = () => Math.round(Math.random() * 2147483647);\n\nexport const random = (seed: number) => {\n    seed = (seed * 16807) % 2147483647;\n    return [seed, (seed - 1) / 2147483646];\n};\n\nexport const insideField = (size: number[], x: number, y: number) => {\n    return x >= 0 && x < size[0] && y >= 0 && y < size[1];\n};\n","import { GameState, Mine, ViewField } from './types';\nimport { insideField } from './utils';\n\nexport const openCell = (game: GameState, x: number, y: number) => {\n    const { field, size, win, lose } = game;\n\n    if (win || lose || !insideField(size, x, y)) {\n        return;\n    }\n\n    const cell = field[y][x];\n\n    if (cell.marked) {\n        return;\n    }\n\n    switch (cell.type) {\n        case 'empty':\n            openEmptyCell(game, x, y);\n            break;\n        case 'mine':\n            openMine(game, cell);\n            break;\n    }\n\n    checkWin(game);\n};\n\nconst openEmptyCell = (game: GameState, x: number, y: number) => {\n    const { field, size } = game;\n\n    if (!insideField(size, x, y)) {\n        return;\n    }\n\n    const cell = field[y][x];\n    if (cell.type === 'mine' || cell.opened) {\n        return;\n    }\n\n    cell.opened = true;\n\n    // TODO: раскоментить, чтобы игра работала\n    if (cell.number === 0) {\n        openEmptyCell(game, x + 1, y + 1);\n        openEmptyCell(game, x + 1, y - 1);\n        openEmptyCell(game, x + 1, y);\n        openEmptyCell(game, x - 1, y);\n        openEmptyCell(game, x - 1, y + 1);\n        openEmptyCell(game, x - 1, y - 1);\n        openEmptyCell(game, x, y + 1);\n        openEmptyCell(game, x, y - 1);\n    }\n};\n\nconst openMine = (game: GameState, mine: Mine) => {\n    game.lose = true;\n    mine.opened = true;\n};\n\nexport const getViewField = (game: GameState) => {\n    const { field, size } = game;\n\n    const viewField: ViewField = [];\n\n    for (let y = 0; y < size[1]; y++) {\n        viewField[y] = [];\n\n        for (let x = 0; x < size[0]; x++) {\n            const cell = field[y][x];\n            if (cell.opened) {\n                viewField[y][x] = cell;\n            } else {\n                viewField[y][x] = {\n                    type: 'unknown',\n                    x,\n                    y,\n                    marked: cell.marked,\n                };\n            }\n        }\n    }\n\n    return viewField;\n};\n\nconst checkWin = (game: GameState) => {\n    const { lose, field, size } = game;\n\n    if (lose) {\n        return;\n    }\n\n    for (let y = 0; y < size[1]; y++) {\n        for (let x = 0; x < size[0]; x++) {\n            const cell = field[y][x];\n\n            if (cell.type === 'empty' && !cell.opened) {\n                return;\n            }\n        }\n    }\n\n    game.win = true;\n};\n\nexport const markCell = (game: GameState, x: number, y: number) => {\n    const { win, lose, field, size } = game;\n\n    if (win || lose || !insideField(size, x, y)) {\n        return;\n    }\n\n    const cell = field[y][x];\n    cell.marked = !cell.marked;\n};\n","import { GameState, Mine, Cell } from './types';\nimport { random, insideField } from './utils';\n\nconst createUniqMines = (seed: number, size: number[], minesCount: number): [number, Mine[]] => {\n    let rnd: number;\n\n    const busyFields = new Set<string>();\n    const mines: Mine[] = [];\n\n    minesCount = Math.min(minesCount, size[0] * size[1]);\n\n    let i = 0;\n\n    while (i < minesCount) {\n        [seed, rnd] = random(seed);\n        const x = Math.floor(rnd * size[0]);\n\n        [seed, rnd] = random(seed);\n        const y = Math.floor(rnd * size[1]);\n\n        const key = `${x}_${y}`;\n\n        if (!busyFields.has(key)) {\n            busyFields.add(key);\n            mines.push({\n                type: 'mine',\n                x,\n                y,\n                opened: false,\n                marked: false,\n            });\n            i++;\n        }\n    }\n\n    return [seed, mines];\n};\n\nconst createEmptyField = (size: number[]) => {\n    const field: Cell[][] = [];\n    for (let y = 0; y < size[1]; y++) {\n        field[y] = [];\n\n        for (let x = 0; x < size[0]; x++) {\n            field[y][x] = {\n                type: 'empty',\n                x,\n                y,\n                number: 0,\n                opened: false,\n                marked: false,\n            };\n        }\n    }\n    return field;\n};\n\nconst incrementCellNumber = (field: Cell[][], size: number[], x: number, y: number) => {\n    if (!insideField(size, x, y)) {\n        return;\n    }\n\n    const cell = field[y][x];\n    if (cell.type === 'mine') {\n        return;\n    }\n\n    cell.number++;\n};\n\nconst addMineToField = (field: Cell[][], size: number[], mine: Mine) => {\n    const { x, y } = mine;\n\n    field[y][x] = mine;\n\n    for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n            if (i === 0 && j === 0) {\n                continue;\n            }\n\n            incrementCellNumber(field, size, x + i, y + j);\n        }\n    }\n};\n\nexport const createGame = (seed: number, size: number[], minesCount: number): GameState => {\n    const field = createEmptyField(size);\n\n    const [, mines] = createUniqMines(seed, size, minesCount);\n\n    mines.forEach((mine) => addMineToField(field, size, mine));\n\n    return {\n        field,\n        size,\n        minesCount,\n        mines,\n        lose: false,\n        win: false,\n    };\n};\n","export const openCellAction = (x: number, y: number) => ({\n    type: 'openCell' as 'openCell',\n    x,\n    y,\n});\n\nexport type OpenCellAction = ReturnType<typeof openCellAction>;\n\nexport const markCellAction = (x: number, y: number) => ({\n    type: 'markCell' as 'markCell',\n    x,\n    y,\n});\n\nexport type MarkCellAction = ReturnType<typeof markCellAction>;\n\nexport const newGameAction = (size: number[], minesCount: number) => ({\n    type: 'newGame' as 'newGame',\n    size,\n    minesCount,\n});\n\nexport type NewGameAction = ReturnType<typeof newGameAction>;\n\nexport type Action = OpenCellAction | MarkCellAction | NewGameAction;\n","import React from 'react';\nimport cn from 'classnames';\nimport { ViewCell } from '../../game/types';\nimport style from './index.module.css';\n\nexport interface CellProps {\n    cell: ViewCell;\n    onClick?: () => void;\n    onMarked?: () => void;\n}\n\nexport const Cell = ({ cell, onClick, onMarked }: CellProps) => {\n    const onContextMenu = (ev: React.MouseEvent) => {\n        ev.preventDefault();\n        if (onMarked) {\n            onMarked();\n        }\n    };\n\n    if (cell.type === 'empty') {\n        const classNumber = Math.min(cell.number, 5);\n        return (\n            <div\n                className={cn(style.cell, style.empty, style[`number-${classNumber}`], {\n                    [style.predicted]: cell.predicted,\n                })}\n                onContextMenu={onContextMenu}\n            >\n                {cell.number !== 0 ? cell.number : ''}\n            </div>\n        );\n    }\n\n    if (cell.type === 'mine') {\n        return (\n            <div\n                className={cn(style.cell, style.mine, { [style.predicted]: cell.predicted })}\n                onContextMenu={onContextMenu}\n            >\n                X\n            </div>\n        );\n    }\n\n    if (cell.marked) {\n        return (\n            <div\n                className={cn(style.cell, style.unknown, style.marked, {\n                    [style.predicted]: cell.predicted,\n                })}\n                onClick={onClick}\n                onContextMenu={onContextMenu}\n            ></div>\n        );\n    }\n\n    return (\n        <div\n            className={cn(style.cell, style.unknown, { [style.predicted]: cell.predicted })}\n            onClick={onClick}\n            onContextMenu={onContextMenu}\n        ></div>\n    );\n};\n","import React, { useState } from 'react';\nimport style from './index.module.css';\n\nexport interface SettingsDialogProps {\n    size: number[];\n    minesCount: number;\n    onSubmit: (size: number[], minesCount: number) => void;\n}\n\nexport const SettingsDialog = ({ size, minesCount, onSubmit }: SettingsDialogProps) => {\n    const [state, setState] = useState({\n        size: size[0],\n        minesCount,\n    });\n\n    return (\n        <div className={style.container}>\n            <div className={style.center}>\n                <div className={style.label}>\n                    Size:{' '}\n                    <input\n                        className={style.input}\n                        type='number'\n                        value={state.size}\n                        onChange={(ev) =>\n                            setState({\n                                ...state,\n                                size: Math.min(Number(ev.target.value), 50),\n                            })\n                        }\n                    />\n                </div>\n                <div className={style.label}>\n                    Mines:{' '}\n                    <input\n                        className={style.input}\n                        type='number'\n                        value={state.minesCount}\n                        onChange={(ev) =>\n                            setState({\n                                ...state,\n                                minesCount: Math.min(Number(ev.target.value), 500),\n                            })\n                        }\n                    />\n                </div>\n                <button onClick={() => onSubmit([state.size, state.size], state.minesCount)}>\n                    Submit\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport { GameState, ViewCell } from '../../game/types';\nimport { getViewField } from '../../game';\nimport { Dispatch } from '../../types';\nimport { openCellAction, markCellAction, newGameAction } from '../../actions';\nimport { Cell } from '../cell';\nimport style from './index.module.css';\nimport { SettingsDialog } from '../settings';\n\nexport interface AppProps {\n    game: GameState;\n    dispatch: Dispatch;\n}\n\nexport const App = ({ game, dispatch }: AppProps) => {\n    const [settings, setSettings] = useState(false);\n\n    const field = game.win || game.lose ? game.field : getViewField(game);\n\n    const cells: ViewCell[] = [];\n    field.forEach((row) => row.forEach((cell) => cells.push(cell)));\n\n    const width = Math.min(500, window.innerWidth);\n\n    const cellSize = Math.floor(width / game.size[0]);\n\n    return (\n        <div className={style.container} style={{ width }}>\n            <div className={style.header}>\n                <div>\n                    Size: {game.size[0]}x{game.size[1]}, mines: {game.minesCount}\n                </div>\n                <div>\n                    <button onClick={() => setSettings(!settings)}>Settings</button>\n                </div>\n            </div>\n            <div className={style.fieldWrapper} style={{ height: width }}>\n                <div\n                    className={style.field}\n                    style={{\n                        gridTemplateColumns: `repeat(${game.size[0]}, 50px)`,\n                        transform: `scale(${cellSize / 50})`,\n                    }}\n                >\n                    {cells.map((cell) => (\n                        <Cell\n                            key={`${cell.x}_${cell.y}`}\n                            cell={cell}\n                            onClick={() => dispatch(openCellAction(cell.x, cell.y))}\n                            onMarked={() => dispatch(markCellAction(cell.x, cell.y))}\n                        />\n                    ))}\n                </div>\n                {settings && (\n                    <SettingsDialog\n                        size={game.size}\n                        minesCount={game.minesCount}\n                        onSubmit={(size, minesCount) => {\n                            dispatch(newGameAction(size, minesCount));\n                            setSettings(false);\n                        }}\n                    />\n                )}\n            </div>\n            {game.lose && (\n                <div\n                    onClick={() => dispatch(newGameAction(game.size, game.minesCount))}\n                    className={style.lose}\n                >\n                    WASTED\n                </div>\n            )}\n            {game.win && (\n                <div\n                    onClick={() => dispatch(newGameAction(game.size, game.minesCount))}\n                    className={style.win}\n                >\n                    WIN!\n                </div>\n            )}\n        </div>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { TestData } from '../../ml/generateData';\nimport { ViewCell } from '../../game/types';\nimport { Cell } from '../cell';\n\nexport interface MlFieldProps {\n    data: TestData;\n}\n\nconst key = (cell: ViewCell) => `${cell.x}_${cell.y}`;\n\nexport const MlField = ({ data: { size, field, mines } }: MlFieldProps) => {\n    const mineSet = new Set<string>();\n    mines.forEach((mine) => mineSet.add(key(mine)));\n\n    const cells: ViewCell[] = [];\n    field.forEach((row) =>\n        row.forEach((cell) => {\n            cell.marked = mineSet.has(key(cell));\n            cells.push(cell);\n        }),\n    );\n\n    const width = 200;\n    const cellSize = Math.floor(width / size[0]);\n\n    return (\n        <div>\n            <div\n                style={{\n                    display: 'grid',\n                    gridTemplateColumns: `repeat(${size[0]}, 50px)`,\n                    transformOrigin: 'top left',\n                    transform: `scale(${cellSize / 50})`,\n                    width: `${width}px`,\n                    height: `${width}px`,\n                    margin: '5px',\n                }}\n            >\n                {cells.map((cell) => (\n                    <Cell key={`${cell.x}_${cell.y}`} cell={cell} />\n                ))}\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport { TestData } from '../../ml/generateData';\nimport { MlField } from '../mlField';\n\nexport interface MlAppProps {\n    data: TestData[];\n}\n\nexport const MlApp = ({ data }: MlAppProps) => {\n    return (\n        <div\n            style={{\n                display: 'grid',\n                gridTemplateColumns: `repeat(auto-fill, 205px)`,\n            }}\n        >\n            {data.map((testData, index) => (\n                <MlField key={index} data={testData} />\n            ))}\n        </div>\n    );\n};\n","import { createGame, openCell } from '../game';\nimport { randomSeed, insideField } from '../game/utils';\nimport { Mine, Cell, ViewCell } from '../game/types';\n\nexport interface TestData {\n    size: number[];\n    field: ViewCell[][];\n    mines: Mine[];\n}\n\nexport const createData = (size: number[], minesCount: number): TestData => {\n    const game = createGame(randomSeed(), size, minesCount);\n\n    const randomCell = () => [\n        Math.floor(Math.random() * size[0]),\n        Math.floor(Math.random() * size[1]),\n    ];\n\n    let x = 0;\n    let y = 0;\n    let cell: Cell;\n\n    do {\n        [x, y] = randomCell();\n        cell = game.field[y][x];\n    } while (cell.type !== 'empty' || cell.number !== 0);\n\n    openCell(game, x, y);\n\n    // Ищем мины рядом с открытыми\n    const nearestMines = game.mines.filter((mine) =>\n        isMineNearWithOpenCell(mine, game.field, game.size),\n    );\n\n    const knownField: ViewCell[][] = [];\n\n    for (let y = 0; y < size[1]; y++) {\n        knownField[y] = [];\n\n        for (let x = 0; x < size[0]; x++) {\n            const cell = game.field[y][x];\n            if (cell.opened) {\n                knownField[y][x] = cell;\n            } else {\n                knownField[y][x] = {\n                    type: 'unknown',\n                    x,\n                    y,\n                    marked: cell.marked,\n                };\n            }\n        }\n    }\n\n    return {\n        field: knownField,\n        mines: nearestMines,\n        size,\n    };\n};\n\nconst isMineNearWithOpenCell = (mine: Mine, field: Cell[][], size: number[]) => {\n    const { x, y } = mine;\n\n    const isOpen = (x: number, y: number): boolean => {\n        if (insideField(size, x, y)) {\n            const cell = field[y][x];\n            return cell.opened;\n        }\n\n        return false;\n    };\n\n    return (\n        isOpen(x + 1, y + 1) ||\n        isOpen(x + 1, y) ||\n        isOpen(x + 1, y - 1) ||\n        isOpen(x, y + 1) ||\n        isOpen(x, y - 1) ||\n        isOpen(x - 1, y + 1) ||\n        isOpen(x - 1, y) ||\n        isOpen(x - 1, y - 1)\n    );\n};\n","import * as tf from '@tensorflow/tfjs';\nimport { TestData } from './generateData';\n\n/**\n * 0 - 8\n * 9 - unknown\n * 10 - mine\n */\nconst typeNumber = 11;\n\nexport const dataToTensor = (data: TestData[], size: number[]) => {\n    const buf = tf.buffer([data.length, size[1], size[0], typeNumber]);\n\n    data.forEach((test, index) => {\n        test.field.forEach((row) =>\n            row.forEach((cell) => {\n                if (cell.type === 'empty') {\n                    buf.set(1, index, cell.y, cell.x, cell.number);\n                } else if (cell.type === 'unknown') {\n                    buf.set(1, index, cell.y, cell.x, 9);\n                }\n\n                // TODO: add mines\n            }),\n        );\n    });\n\n    return buf.toTensor().as2D(data.length, size[1] * size[0] * typeNumber);\n};\n\nexport const dataToMinesTensor = (data: TestData[], size: number[]) => {\n    const buf = tf.buffer([data.length, size[1], size[0], typeNumber]);\n\n    data.forEach((test, index) => {\n        test.mines.forEach((mine) => {\n            buf.set(1, index, mine.y, mine.x, 10);\n        });\n    });\n\n    return buf.toTensor().as2D(data.length, size[1] * size[0] * typeNumber);\n};\n","import * as tf from '@tensorflow/tfjs';\nimport { createData, TestData } from './generateData';\nimport { dataToTensor, dataToMinesTensor } from './dataToTensor';\n\nconst size = [10, 10];\nconst minesCount = 10;\n\nconst model = tf.sequential();\n\nmodel.add(\n    tf.layers.dense({\n        units: 2500,\n        activation: 'relu',\n        inputShape: [size[1] * size[0] * 11],\n    }),\n);\n\nmodel.add(tf.layers.dense({ units: 2000, activation: 'relu' }));\nmodel.add(tf.layers.dense({ units: 1500, activation: 'relu' }));\n// model.add(tf.layers.reshape({ targetShape: [size[1], size[0]] }));\n// model.add(tf.layers.timeDistributed({ layer: tf.layers.dense({ units: 11 }) }));\nmodel.add(tf.layers.dense({ units: size[0] * size[1] * 11, activation: 'softmax' }));\n\nmodel.summary();\n\nmodel.compile({\n    optimizer: 'rmsprop', // tf.train.adam(),\n\n    loss: 'categoricalCrossentropy',\n    // loss: 'sparseCategoricalCrossentropy', // нужно использовать oneHot\n    metrics: ['accuracy'],\n\n    // loss: tf.losses.meanSquaredError,\n    // metrics: ['mse'],\n});\n\nconst getHtml = (array: number[]) => {\n    return array\n        .map((x, i) => {\n            if (i % 10 === 0) {\n                return `\\n${x.toFixed(1)}`;\n            } else {\n                return `${x.toFixed(1)}`;\n            }\n        })\n        .join(' ');\n};\n\nconst createTestData = (n: number) => {\n    const data: TestData[] = [];\n    for (let i = 0; i < n; i++) {\n        data.push(createData(size, minesCount));\n    }\n\n    console.log(`Created ${n} data`);\n\n    const x = dataToTensor(data, size);\n    const y = dataToMinesTensor(data, size);\n\n    console.log(`Converted ${n} data`);\n\n    return [x, y] as [tf.Tensor2D, tf.Tensor2D];\n};\n\nexport const train = async () => {\n    const validationData = createTestData(2048);\n    const [x, y] = createTestData(2048 * 2);\n\n    const history = await model.fit(x, y, {\n        epochs: 1,\n        batchSize: 32,\n        validationData,\n        yieldEvery: 'epoch',\n        callbacks: {\n            onEpochEnd: (epoch, logs) => {\n                if (logs) {\n                    console.log(\n                        `Epoch: ${epoch}\\nloss: ${logs.loss.toFixed(3)}\\nacc: ${logs.acc.toFixed(\n                            3,\n                        )}\\nval_loss: ${logs.val_loss.toFixed(3)}\\nacc_loss: ${logs.val_acc.toFixed(\n                            3,\n                        )}`,\n                    );\n                }\n            },\n        },\n    });\n\n    validationData[0].dispose();\n    validationData[1].dispose();\n    x.dispose();\n    y.dispose();\n\n    return history;\n};\n\nexport const predict = (): { data: TestData } => {\n    return tf.tidy(() => {\n        const data = createData(size, minesCount);\n        const logData = [data];\n\n        const newX = dataToTensor(logData, size);\n\n        const newY = dataToMinesTensor(logData, size);\n\n        const predictOut = model.predict(newX) as tf.Tensor2D;\n\n        console.log('RealX', getHtml(Array.from(shape(newX, 1).dataSync())));\n        console.log('RealY', getHtml(Array.from(shape(newY, 10).dataSync())));\n\n        const pred = Array.from(shape(predictOut, 10).dataSync());\n        console.log(\n            'Predict',\n            getHtml(pred), //.map((x) => Math.round(x))),\n        );\n\n        let max = 0;\n        let index = 0;\n        pred.forEach((x, i) => {\n            if (x > max) {\n                max = x;\n                index = i;\n            }\n        });\n\n        const y = Math.floor(index / size[0]);\n        const x = index - y * size[1];\n\n        data.field[y][x].predicted = true;\n\n        return { data } as any;\n    });\n};\n\nconst shape = (t2: tf.Tensor2D, param: number) => {\n    const t4 = t2.as4D(t2.shape[0], size[1], size[0], 11);\n\n    const t3 = t4\n        .slice([0, 0, 0, 0], [1, t4.shape[1], t4.shape[2], t4.shape[3]])\n        .as3D(t4.shape[1], t4.shape[2], t4.shape[3]);\n\n    return t3.slice([0, 0, param], [t3.shape[0], t3.shape[1], 1]).as2D(t3.shape[0], t3.shape[1]);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport { App } from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport { createGame, openCell } from './game';\nimport { Action } from './actions';\nimport { Dispatch } from './types';\nimport { markCell } from './game/actions';\nimport { randomSeed } from './game/utils';\nimport { MlApp } from './components/mlApp';\nimport { createData, TestData } from './ml/generateData';\nimport { train, predict } from './ml';\n\nconst startGame = () => {\n    let game = createGame(5, [10, 10], 15);\n\n    const render = () => {\n        ReactDOM.render(<App game={game} dispatch={dispatch} />, document.getElementById('root'));\n    };\n\n    const dispatch: Dispatch = (action: Action) => {\n        switch (action.type) {\n            case 'openCell':\n                openCell(game, action.x, action.y);\n                break;\n            case 'markCell':\n                markCell(game, action.x, action.y);\n                break;\n            case 'newGame':\n                game = createGame(randomSeed(), action.size, action.minesCount);\n                break;\n        }\n\n        render();\n    };\n\n    render();\n};\n\nconst startMl = () => {\n    const data: TestData[] = [];\n\n    for (let i = 0; i < 20; i++) {\n        data.push(createData([10, 10], 15));\n    }\n\n    ReactDOM.render(<MlApp data={data} />, document.getElementById('root'));\n};\n(async () => {\n    if (window.location.search.slice(1) === 'test') {\n        startMl();\n    } else if (window.location.search.slice(1) === 'ml') {\n        const testData: TestData[][] = [];\n\n        let i = 0;\n        for (i = 0; i < 50; i++) {\n            await train();\n\n            testData[i] = [];\n            for (let j = 0; j < 3; j++) {\n                const { data } = predict();\n                testData[i].push(data);\n            }\n            ReactDOM.render(\n                <div>\n                    {testData.map((data, index) => (\n                        <div key={index}>\n                            <div>Epoch: {index}</div>\n                            <MlApp data={data} />\n                        </div>\n                    ))}\n                </div>,\n                document.getElementById('root'),\n            );\n        }\n\n        setInterval(() => {\n            const { data } = predict();\n            testData[i - 1].push(data);\n\n            ReactDOM.render(\n                <div>\n                    {testData.map((data, index) => (\n                        <div key={index}>\n                            <div>Epoch: {index}</div>\n                            <MlApp data={data} />\n                        </div>\n                    ))}\n                </div>,\n                document.getElementById('root'),\n            );\n        }, 500);\n    } else {\n        startGame();\n    }\n})();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}